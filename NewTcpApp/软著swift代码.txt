//
//  BaseRequest.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/2.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
let manager = AFHTTPSessionManager.init(sessionConfiguration: URLSessionConfiguration.default)
class BaseRequest: NSObject {
    
   
    
   
    //MARK:----------------------AF网络请求相关----------------------
    
    public static func initManager()->(AFHTTPSessionManager)
    {
        
        manager.requestSerializer = AFHTTPRequestSerializer()
        manager.responseSerializer = AFHTTPResponseSerializer()
        manager.responseSerializer.acceptableContentTypes = NSSet(object: "text/html") as? Set<String>
//            [NSSet setWithObject:@"text/html"]
        return manager
    }
    
    //MARK:----------------------POST请求先关----------------------
    /// post请求
    ///
    /// - Parameters:
    ///   - url: 请求地址
    ///   - params: 请求参数
    ///   - hadToast: 是否添加提醒
    ///   - fail: 失败返回闭包(返回空闭包)
    ///   - success: 成功返回闭包
    public static func basePost(url:String,params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
       let manager = self.initManager()
        let task:URLSessionDataTask? =  manager.post(url, parameters: params, headers: nil, progress: nil, success: { (task:URLSessionDataTask, any:Any) in
         if any is Dictionary<String, Any>{
            
             //TODO:(harry标注)-- 等接口能用的时候 考虑是否只返回 data中的数据
             success(any as! Dictionary<String, Any>)
         }else{
            let str = String.init(data: any as! Data, encoding: String.Encoding.utf8)
            print(str ?? "")
            let dic = try?JSONSerialization.jsonObject(with: any as! Data, options: JSONSerialization.ReadingOptions.allowFragments) as! Dictionary<String, Any>
            if String.changeToString(inValue: dic?["code"] ?? "2") == "1" {
                if dic?["data"] is Dictionary<String, Any>{
                    success(dic?["data"] as! Dictionary<String, Any>)
                }else{
                    if dic != nil {
                        success(dic!)
                    }
                }
            }else{
                print(String.changeToString(inValue: dic?["msg"] ?? "错了"))
                if dic != nil {
                    success(dic!)
                }
                
            }
//            [[NSString alloc] initWithData:data  encoding:NSUTF8StringEncoding]
            
        }
        }) { (task:URLSessionDataTask?,err:Error) in
            
           fail(err)
           print(err.localizedDescription.description )
        }
        task?.resume()
    }
    
    
    
    
    //MARK:----------------------Json 与 String 互转----------------------
    
    /// 将类转化为json串
    ///
    /// - Parameter object: 需要转化的类
    /// - Returns: 返回转换后的json串
    public static func makeJsonStringWithObject(object:Any)->(String)
    {
        let result :Data = try! JSONSerialization.data(withJSONObject: object, options: JSONSerialization.WritingOptions.prettyPrinted)
        let jsonStr:String = String.init(data: result, encoding: .utf8)!
       return jsonStr
    }
    
    
    /// 将json串转成类
    ///
    /// - Parameter jsonStr: 需要转化的json串
    /// - Returns: 返回转换后的类
    public static func makeJsonWithString(jsonStr:String)->(Any)
    {
        let data:Data = jsonStr.data(using: .utf8)!
        let result = try! JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.mutableContainers)
        return result
    }
    
    
    
    //MARK:----------------------MD5加密----------------------
    
    /// MD5 加密
    ///
    /// - Parameter str: 需要加密的字符串
    /// - Returns: MD5加密后的字符串
    public static func md5StringFromString(str:String)->(String?)
    {
        guard !str.isEmpty  else {
            return nil
        }
        
        let cStr = str.cString(using: String.Encoding.utf8);
        let buffer = UnsafeMutablePointer<UInt8>.allocate(capacity: 16)
        CC_MD5(cStr!,(CC_LONG)(strlen(cStr!)), buffer)
        let md5String = NSMutableString();
        for i in 0 ..< 16{
            md5String.appendFormat("%02x", buffer[i])
        }
        free(buffer)
        return md5String as String
    }
    
    
    
   //MARK:----------------------其他相关----------------------
    
   /// 获取当前所在的最前边的UIViewController
   ///
   /// - Returns: 返回
   public static func appTopController() ->(UIViewController)
    {
        let appRoot = UIApplication.shared.keyWindow?.rootViewController
        var topVC = appRoot
        while ((topVC?.children) != nil) {
            if topVC! is UITabBarController {
                topVC = (topVC! as! UITabBarController).selectedViewController
            }
            else if topVC! is UINavigationController
            {
               topVC = (topVC! as! UINavigationController).visibleViewController
            }
            else
            {
                break
            }
        }
        
        return topVC!
    }
    
    
    
    /// 错误提醒
    ///
    /// - Parameters:
    ///   - code: 错误码
    ///   - message: 错误具体信息
    public static func analysisFailMessage(code:String,message:String)->()
    {
    
    
    }
}
//
//  GroupRequest.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/3.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
//关于群组相关的请求
class GroupRequest: BaseRequest {
    
    /// 入群申请
    ///
    /// - Parameters:
    ///   - params: 请求参数 app_token:App登录Token groupid:群组ID msg:申请说明
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func groupJoinApply(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_JoinApply), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    /// 批准入群申请
    ///
    /// - Parameters:
    ///   - params: 请求参数 app_token:App登录Token applyid:申请ID status:审核结果（1:同意入群;2:拒绝入群）
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func groupJoinApplyAudit(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_JoinApplyAudit), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    /// 使用验证码加入群组
    ///
    /// - Parameters:
    ///   - params: 请求参数 app_token:App登录Token groupid:群组ID auth_code:群组验证码
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func groupJoinByCode(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_JoinByCode), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    /// 扫描二维码加入群组
    ///
    /// - Parameters:
    ///   - params: 请求参数 app_token:App登录Token groupid:群组ID verify_code:群组验证码
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func groupJoinByQr(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_JoinByQr), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    /// 创建群组
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func creat(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_Create), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
        
//        self.basePost(url: "", params: params, hadToast: hadToast, fail: fail, success: success);
    }
    
    
    
    
    /// 修改群组
    ///
    /// - Parameters:
    ///   - params: 请求参数 app_token:App登录Token groupid:群组ID group_name:群组名称
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func update(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_Update), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    /// 是否开放
    ///
    /// - Parameters:
    ///   - params: 请求参数 app_token:App登录Token groupid:群组ID is_open:公开状态（0不公开，1公开）
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func setOpen(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_SetOpen), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 退出群组
    ///
    /// - Parameters:
    ///   - params: 请求参数 app_token:App登录Token groupid:群组ID
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func quit(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_Quit), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 解散群组
    ///
    /// - Parameters:
    ///   - params: 请求参数 app_token:App登录Token groupid:群组ID
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回{"code":1,"msg":"","data":null}
    public static func dismiss(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
         self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_Dismiss), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 群组成员
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func userList(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: "", params: params, hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 删除群组成员
    ///
    /// - Parameters:
    ///   - params: 请求参数 appToken:App登录Token groupId:群组ID userIdStr:删除的用户ID（,分割）
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func delUser(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_DelUser), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 获取加入群组
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func myGroupList(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: "", params: params, hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 访问服务端获取用户信息
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func getUserByIds(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: "", params: params, hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 搜索群组
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func search(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_Search), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 置顶群组
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func setTop(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: "", params: params, hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 获取群组信息
    ///
    /// - Parameters:
    ///   - params: 请求参数  app_token:App登录Token groupid:群组ID
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func info(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_Info), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 邀请加入
    ///
    /// - Parameters:
    ///   - params: 请求参数 app_token:App登录Token groupid:群组ID userid_str:邀请用户ID字符串（,分割）
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func inviteUser(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_InviteUser), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 接受邀请加入
    ///
    /// - Parameters:
    ///   - params: 请求参数 app_token:App登录Token inviteid:邀请ID
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func acceptInvite(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        //group_AcceptInvite
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_AcceptInvite), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 主动加入
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func requestJoin(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: "", params: params, hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 验证码加入
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func joinByAuthCode(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: "", params: params, hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 二维码加入
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func join(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: "", params: params, hadToast: hadToast, fail: fail, success: success);
    }
    /// 获取二维码
    ///
    /// - Parameters:
    ///   - params: 请求参数 appToken:App登录Token groupId:群组ID authCode:群组验证码
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func getQrCode(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: group_Qr_code), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    
}
//
//  UserRequest.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/3.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
//用户管理相关
class UserRequest: BaseRequest {
    /// 获取用户Token
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func getToken(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: im_GetToken), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
//        self.basePost(url: data_Init, params: params, hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 获取初始化数据
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func initData(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: im_InitData), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: DataOperation.saveInitData(success: success));
        //        self.basePost(url: data_Init, params: params, hadToast: hadToast, fail: fail, success: success);
    }
    
    
    /// 获取用户信息
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func userInfo(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: im_UserInfo), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    
    
    
    /// 获取用户信息列表
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func userList(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrl(params: params, methodName: im_UserList), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
    
    /// 获取好友列表
    ///
    /// - Parameters:
    ///   - params: 请求参数  app_token:App登录Token
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func friends(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: im_Friends), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: DataOperation.saveFriendsData(success: success));
    }
    
    
    /// 获取部门/其他部分成员
    ///
    /// - Parameters:
    ///   - params: 请求参数  app_token:App登录Token
    ///   - hadToast: 是否提醒
    ///   - fail: 失败返回
    ///   - success: 成功返回
    public static func coachSearchUser(params:Dictionary<String, Any>,hadToast:Bool,fail:@escaping ( _ err:Error) ->() ,success:@escaping (_ success:Dictionary<String, Any>) ->())
    {
        self.basePost(url: SignTool.getSignUrlNotoken(params: params, methodName: im_Coach_Search_User), params: ["param_json":SignTool.makeJsonStrWith(object: params)], hadToast: hadToast, fail: fail, success: success);
    }
}
//
//  URL.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/3.
//  Copyright © 2017年 柴进. All rights reserved.
//
import Foundation
//MARK:----------------------初始化----------------------
//http://t-gw.xslp.cn" else "
let host_url = "http://t-gw.xslp.cn/index.php?" //网络接口
//let host_url = "https://api.xslp.com/index.php?" //网络接口
let data_Init = "index.php" //初始化数据
//MARK:----------------------群组相关----------------------
let group_Create = "tcp.group.create"   //创建群组
let group_Update = "tcp.group.update"   //修改群组
let group_SetOpen = "tcp.group.set_open" //设置群组是否开放
let group_Quit = "tcp.group.quit"       //退出群组
let group_Dismiss = "tcp.group.dismiss"  //解散群组
let group_UserList = "tcp.group.userList"  //群组成员
let group_DelUser = "tcp.group.delUser"  //删除群组成员
let group_MyGroupList = "tcp.group.myGroupList"  //获取加入的群组信息
let group_GetUserByIds = "tcp.group.getUserByIds"  //访问服务端获取用户信息
let group_Search = "tcp.group.search"  //搜索群组
let group_SetTop = "tcp.group.setTop"  //置顶
let group_Info = "tcp.group.info"  //获取群组信息
let group_InviteUser = "tcp.group.invite"  //邀请加入
let group_AcceptInvite = "tcp.group.accept"  //接收邀请加入
let group_RequestJoin = "tcp.group.requestJoin"  //主动加入
let group_JoinByQr = "tcp.group.join_by_qr"  //二维码加入
let group_JoinApply = "tcp.group.join_apply"  //入群申请
let group_JoinApplyAudit = "tcp.group.join_audit"  //批准入群申请
let group_JoinByCode = "tcp.group.join_by_code"  //使用验证码加入群
let group_Qr_code   = "tcp.group.qr_code"  //获取二维码
//MARK:----------------------用户管理相关----------------------
let im_GetToken = "tcp.im.get_token"  //获取token
let im_InitData = "tcp.im.sync"  //初始化数据
let im_UserInfo = "tcp.im.user_info"  //获取用户信息
let im_UserList = "tcp.im.user_list"  //获取多个用户信息
let im_Friends = "tcp.im.friends"  //获取好友列表
let im_Coach_Search_User = "tcp.im.cloud_coach_search_user" //搜索部门/其它部门成员
//
//  SignTool.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/15.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
let KSecret = "f0c5ccf7d9b775bb8a92664522b03f02"
let KAppKey = "106"
class SignTool: NSObject {
    
    
}
//MARK: - ---------------------对外接口----------------------
extension SignTool{
    
    
    /// 获取签名后的Url  不要添加token
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - methodName: 请求方法名
    /// - Returns: 返回签名后的url
    public static func getSignUrlNotoken(params:Dictionary<String, Any>,methodName:String)->(String)
    {
       var url = String()
        url = host_url + self.signWith(params: params , methodName: methodName, needToken: false)
       return url
    }
    
    
    /// 获取签名后的url  需要token
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - methodName: 方法名称
    /// - Returns: 返回签名后的url
    public static func getSignUrl(params:Dictionary<String, Any>,methodName:String)->(String)
    {
        var url = String()
        url = host_url + self.signWith(params: params , methodName: methodName, needToken: true)
        return url
    }
    
    
    
    
    /// 做签名加密
    ///
    /// - Parameters:
    ///   - params: 请求参数
    ///   - methodName: 请求接口名称
    ///   - needToken: 是否需要加入token
    /// - Returns: 返回加密后的签名
    public static func signWith(params:Dictionary<String, Any>,methodName:String,needToken:Bool)->(String)
    {
       
        if needToken == true {
           //需要token
          let signDic:NSDictionary = ["app_key":KAppKey,
                                        "method":methodName,
                                        "access_token":sharePublicDataSingle.publicData.access_token,
                                        "timestamp":self.timeStamp(),
                                        "v":"V10",
                                        
            ]
          
         let md5SignStr = self.md5SignWith(params: signDic, paramsJsonStr: self.makeJsonStrWith(object: params)).uppercased()
            
            let finalStr = String.init(format: "app_key=%@&v=%@&method=%@&timestamp=%@&sign=%@&access_token=%@",signDic["app_key"] as! String, signDic["v"] as! String, signDic["method"] as! String,signDic["timestamp"] as! String, md5SignStr,signDic["access_token"] as! String)
         return finalStr
        }
        else
        {
          
            let signDic:NSDictionary = ["app_key":KAppKey,
                                        "method":methodName,
//                                        "access_token":self.getToken(),
                                        "timestamp":self.timeStamp(),
                                        "v":"V10",
                                        "access_token":"",
                                        ]
            
            let md5SignStr = self.md5SignWith(params: signDic, paramsJsonStr: self.makeJsonStrWith(object: params)).uppercased()
            
            
            let finalStr = String.init(format: "app_key=%@&v=%@&method=%@&timestamp=%@&sign=%@&access_token=",signDic["app_key"] as! String, signDic["v"] as! String, signDic["method"] as! String, signDic["timestamp"] as! String, md5SignStr)
            return finalStr
            
        }
        
     
    }
    
}
//MARK: - ---------------------本类内部方法，不对外提供----------------------
extension SignTool
{
    
    /// 获取token
    ///
    /// - Returns: 返回token
    fileprivate static func getToken()->(String)
    {
       return "123"
    }
    
    
    /// 做MD5加密
    ///
    /// - Parameters:
    ///   - params: <#params description#>
    ///   - paramsJsonStr: <#paramsJsonStr description#>
    /// - Returns: <#return value description#>
    fileprivate static func md5SignWith(params:NSDictionary,paramsJsonStr:String)->(String)
    {
//        if params["access_token"] == nil {
//            let str = String.init().appending(KSecret)
//                .appending("access_token")
//                .appending("app_key")
//                .appending(KAppKey)
//                .appending("method")
//                .appending(params["method"] as! String)
//                .appending("param_json")
//                .appending(paramsJsonStr)
//                .appending("timestamp")
//                .appending(params["timestamp"] as! String)
//                .appending("v")
//                .appending(params["v"] as! String)
//                .appending(KSecret);
//            
//            
////            let str = String.init(format: "%@app_key%@method%@param_json%@timestamp%@v%@%@", KSecret,params["app_key"] as! String,params["method"] as! String,paramsJsonStr,params["timestamp"] as! String,params["v"] as! String,KSecret)
//            return BaseRequest.md5StringFromString(str: str)!
//        }
//        else
//        {
//            let str = String.init(format: "%@access_token%@app_key%@method%@param_json%@timestamp%@v%@%@", KSecret,params["access_token"] as! String,params["app_key"] as! String,params["method"] as! String,paramsJsonStr,params["timestamp"] as! String,params["v"] as! String,KSecret)
//            return BaseRequest.md5StringFromString(str: str)!
//            
//        }
        var str = String.init().appending(KSecret)
            .appending("access_token")
            
        if params["access_token"] as! String != "" {
            str = str.appending(params["access_token"] as! String)
        }
        str = str.appending("app_key")
            .appending(KAppKey)
            .appending("method")
            .appending(params["method"] as! String)
            .appending("param_json")
            .appending(paramsJsonStr)
            .appending("timestamp")
            .appending(params["timestamp"] as! String)
            .appending("v")
            .appending(params["v"] as! String)
            .appending(KSecret);
        
        
        //            let str = String.init(format: "%@app_key%@method%@param_json%@timestamp%@v%@%@", KSecret,params["app_key"] as! String,params["method"] as! String,paramsJsonStr,params["timestamp"] as! String,params["v"] as! String,KSecret)
        return BaseRequest.md5StringFromString(str: str)!
    
    }
    
    
    /// 做json串处理
    ///
    /// - Parameter object: <#object description#>
    static func makeJsonStrWith(object:Any)->(String)
    {
      return  BaseRequest.makeJsonStringWithObject(object: object)
    }
    
    
    /// 获取时间戳
    ///
    /// - Returns: <#return value description#>
    fileprivate static func timeStamp()->(String)
    {
       let timeStamp = NSDate.timeIntervalSinceReferenceDate
       return String.init(format: "%0.f", timeStamp)
        
    }
    
}
//
//  ThemeListVCViewController.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/8.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class ThemeListVCViewController: BaseViewController {
    var table:UITableView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configUI()
        
        
    }
    func configUI(){
       table = UITableView.init(frame: CGRect.init(x: 0, y: 0, width: kScreenW, height: kScreenH-64-49), style: .plain)
       view.addSubview(table!)
       table?.dataSource = self
       table?.delegate = self
    }
    
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    /*
    // MARK: - Navigation
    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */
}
extension ThemeListVCViewController:UITableViewDelegate,UITableViewDataSource
{
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 70
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return 10;
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cellIde = "cell"
        var cell:UITableViewCell? = tableView.dequeueReusableCell(withIdentifier: cellIde)
        if cell == nil  {
            
           cell = (Bundle.main.loadNibNamed("ThemeListCell", owner: self, options:nil)?.last as! ThemeListCell?)!
        }
        return cell!
    }
    
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let rcb = ThemeChatVC.init(conversationType: RCConversationType.ConversationType_PRIVATE, targetId: "2222")
        
            self.navigationController?.pushViewController(rcb!, animated: true)
    }
}
//
//  GroupCreateVC.swift
//  NewTcpApp
//
//  Created by xslp on 2020/7/23.
//  Copyright © 2020 xslpiOS. All rights reserved.
//
import UIKit
class GroupCreateVC: BaseViewController, UISearchBarDelegate, UITableViewDelegate, UITableViewDataSource, BaseCellDelegate {
    
    //部门数据数据源
    var departDataArray:Array<RLMObject>?
    
    //其他部门的数据源
    var otherDepartDataArray:Array<RLMObject>?
    
    //选择的数据源
    var seleDepartArray:Array<RLMObject> = []
    var seleOtherDepartArray:Array<RLMObject> = []
    //是否是部门数据
    var isDepartmentData:Bool = true
    
    var isLoadDepartData  = false
    var isLoadOtherDepartData = false
    @objc override func rightBtnClick(button: UIButton) {
        
        if isDepartmentData {
            if self.seleDepartArray.count == 0 {return}
        }
        
        if !isDepartmentData {
            if self.seleOtherDepartArray.count == 0 {return}
        }
        
        let alert = UIAlertController.init(title: "群组名称", message: "请输入创建的群组名称", preferredStyle: .alert)
                   alert.addTextField { (textField) in
                       textField.placeholder = "请输入群组名称"
                   }
                   
        let cancelAction = UIAlertAction.init(title: "取消", style: .cancel) { (cancelAction) in
            let isOpenVC = GroupIsOpenVC()
            isOpenVC.userArray = self.isDepartmentData ? self.seleDepartArray : self.seleOtherDepartArray
            self.navigationController?.pushViewController(isOpenVC, animated: true)
        }
                   
                   let okAction = UIAlertAction.init(title: "确认", style: .default) { (okAction) in
                      let isOpenVC = GroupIsOpenVC()
                      isOpenVC.groupName = alert.textFields?.first?.text
                      isOpenVC.userArray = self.isDepartmentData ? self.seleDepartArray : self.seleOtherDepartArray
                      self.navigationController?.pushViewController(isOpenVC, animated: true)
                   }
                   
                   alert.addAction(cancelAction)
                   alert.addAction(okAction)
                   self.present(alert, animated: true, completion: nil)
    
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        self.title = "选择成员"
        
        view.backgroundColor = UIColor.white
        self.setRightBtnWithArray(items: ["确定"])
        
        self.createUI()
        
        
        //加载数据
        self.loadData()
    }
    
    
    func createUI() {
        
        view.addSubview(topBtnView)
        topBtnView.addSubview(departmentBtn)
        topBtnView.addSubview(otherDepartmentBtn)
        topBtnView.addSubview(topBtmLine)
        view.addSubview(searchView)
        view.addSubview(listTable)
        
        topBtnView.mas_makeConstraints { (make) in
            make?.left.right().equalTo()(view)
            make?.top.equalTo()(NAV_HEIGHT+heightOfAddtionalHeader)
            make?.height.equalTo()(55.0)
        }
        
        departmentBtn.mas_makeConstraints { (make) in
            make?.top.left().equalTo()(topBtnView)
            make?.width.equalTo()(topBtnView.mas_width)?.multipliedBy()(0.5)
            make?.bottom.equalTo()(-5.0)
        }
        
        otherDepartmentBtn.mas_makeConstraints { (make) in
            make!.top.centerY().width().height().equalTo()(departmentBtn)
            make?.right.equalTo()(topBtnView)
        }
        
        topBtmLine.mas_makeConstraints { (make) in
            make?.width.equalTo()(departmentBtn)
            make?.height.equalTo()(3)
            make?.bottom.equalTo()(topBtnView)?.offset()(-5)
        }
        searchView.mas_makeConstraints { (make) in
            make?.left.centerX()?.right()?.equalTo()(view)
            make?.height.equalTo()(50.0)
            make?.top.equalTo()(topBtnView.mas_bottom)
        }
        
        
        listTable.mas_makeConstraints { (make) in
            make?.top.equalTo()(searchView.mas_bottom)
            make?.left.right()?.centerX()?.equalTo()(view)
            make?.bottom.equalTo()(view)
        }
    }
    
   func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
    if !isDepartmentData {
        return otherDepartDataArray != nil ?Int((otherDepartDataArray?.count)!): 0
    }
    return departDataArray != nil ?Int((departDataArray?.count)!): 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
      
        var cell:UITableViewCell? = tableView.dequeueReusableCell(withIdentifier: "cell")
        if cell == nil
        {
           
            let path:String? = Bundle.main.path(forResource: "BaseTableCell", ofType: "nib")
            if path == nil {
               let  aClass  = getClassWitnClassName("BaseTableCell") as! UITableViewCell.Type
                cell = aClass.init(style: .default, reuseIdentifier: "BaseTableCell")
            }
            else
            {
                cell = Bundle.main.loadNibNamed("BaseTableCell", owner: self, options: nil)?.last as! UITableViewCell?
                
            }
        }
        
        var model:RLMObject?
            
        if isDepartmentData {
            
            model = departDataArray![Int(indexPath.row)]
        }else {
            
            model = otherDepartDataArray![Int(indexPath.row)]
        }
            
        cell?.setValue(model, forKey: "model")
    
        let bCell = cell as! BaseTableCell
        bCell.delegate = self
        bCell.rightBtn.isHidden = true
        bCell.rightBtn.isHidden = true
        
        var seleMemberArray:Array<RLMObject>?
        if isDepartmentData {
            seleMemberArray = self.seleDepartArray
        }else {
            seleMemberArray = self.seleOtherDepartArray
        }
        
        bCell.selectImage.image = UIImage.init(named: "logic_normal")
        
        if seleMemberArray?.count ?? 0 > 0 {
            if (seleMemberArray?.contains(where: { (m) -> Bool in
                return (m as! FriendsModel).userid == (model as! FriendsModel).userid
            }))!{
                
                bCell.selectImage.image = UIImage.init(named: "logic_select")
            }
        }
        
//        if ((isDepartmentData ? seleDepartArray : seleOtherDepartArray)?.contains(where: { (m) -> Bool in
//            return (m as! FriendsModel).userid == (model as! FriendsModel).userid
//        }))!{
//            bCell.selectImage.backgroundColor = UIColor.green
//        }
//        else
//        {
//            bCell.selectImage.backgroundColor = UIColor.red
//            bCell.selectImage.image = UIImage.init(named: "logic_normal")
//        }
        
        return cell!
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let model:FriendsModel = (isDepartmentData ? departDataArray : otherDepartDataArray)?[Int(indexPath.row)] as! FriendsModel
        
        let index = (isDepartmentData ? seleDepartArray : seleOtherDepartArray).firstIndex(where: { (m) -> Bool in
             return (m as! FriendsModel).userid == model.userid
         })
         if (index != nil) {
            
            if isDepartmentData {
                seleDepartArray.remove(at: index!)
            }else {
                seleOtherDepartArray.remove(at: index!)
            }
            
         }
         else
         {
            if isDepartmentData {
                seleDepartArray.append(model)
            }else {
                seleOtherDepartArray.append(model)
            }
             
         }
        
        tableView.reloadRows(at: [indexPath], with: .none)
    }
    
    //点击申请加入按钮
    func cellRightBtnClick(model: RLMObject) {
        
    }
    
    fileprivate lazy var topBtnView: UIView = {
        var topBtnView = UIView()
        topBtnView.backgroundColor = UIColor.groupTableViewBackground
        return topBtnView
    }()
    
    fileprivate lazy var searchView: UISearchBar = {
        var searchView = UISearchBar.init()
        
        searchView.placeholder = "请输入用户名（邮箱/手机号）"
        searchView.returnKeyType = .search
        searchView.delegate = self
        if #available(iOS 13.0, *) {
            searchView.searchTextField.font = FONT_14
        }
        return searchView
    }()
    
    fileprivate lazy var departmentBtn: UIButton = {
        var departmentBtn = UIButton.init()
        departmentBtn.setTitleColor(UIColor.hexString(hexString: "333333"), for: .normal)
        departmentBtn.setTitleColor(UIColor.hexString(hexString: "1972D8"), for: .selected)
        departmentBtn.titleLabel?.font = FONT_14
        departmentBtn.setTitle("搜本部门", for: .normal)
        departmentBtn.addTarget(self, action: #selector(searchBtnClick(_ :)), for: .touchUpInside)
        departmentBtn.isSelected = true
        departmentBtn.tag = 100
        return departmentBtn
    }()
    
    
    fileprivate lazy var otherDepartmentBtn: UIButton = {
        var otherDepartmentBtn = UIButton.init()
        otherDepartmentBtn.setTitleColor(UIColor.hexString(hexString: "333333"), for: .normal)
        otherDepartmentBtn.setTitleColor(UIColor.hexString(hexString: "1972D8"),for: .selected)
        otherDepartmentBtn.titleLabel?.font = FONT_14
        otherDepartmentBtn.setTitle("搜其他部门", for: .normal)
        otherDepartmentBtn.addTarget(self, action: #selector(searchBtnClick(_ :)), for: .touchUpInside)
        otherDepartmentBtn.tag = 101
        return otherDepartmentBtn
    }()
    
    fileprivate lazy var topBtmLine: UIView = {
        var topBtmLine = UIView.init()
        topBtmLine.backgroundColor = UIColor.hexString(hexString: "1972D8")
        
        return topBtmLine
    }()
    
    fileprivate lazy var  listTable: UITableView = {
        var listTable = UITableView.init(frame: .zero, style: .plain)
        listTable.delegate = self
        listTable.dataSource = self
        
        listTable.tableFooterView = UIView.init()
        self.automaticallyAdjustsScrollViewInsets = false
        listTable.backgroundColor = UIColor.groupTableViewBackground
        let path:String? = Bundle.main.path(forResource: "BaseTableCell", ofType: "nib")
               
               
               if path == nil {
                   
                   listTable.register(NSClassFromString("BaseTableCell"), forCellReuseIdentifier: "BaseTableCell")
               }
               else
               {
                   listTable.register(UINib.init(nibName: "BaseTableCell", bundle: Bundle.main), forCellReuseIdentifier: "cell")
               }
               
               listTable.rowHeight = 50
        return listTable
    }()
    
    
    //MARK: 搜索按钮点击
    @objc func searchBtnClick(_ btn:UIButton) {
        self.view.endEditing(true)
        
        departmentBtn.isSelected = false
        otherDepartmentBtn.isSelected = false
        btn.isSelected = true
        
        UIView.animate(withDuration: 0.25) {
            self.topBtmLine.mas_updateConstraints { (make) in
                make?.left.equalTo()(CGFloat((btn.tag-100))*kScreenW/2.0)
            }
            
            self.topBtmLine.superview?.layoutIfNeeded()
        }
        
        if btn.tag == 100 {
            //部门人员
            if isDepartmentData {
                return;
            }
            
            isDepartmentData = true
            if !isLoadDepartData {
                self.loadData()
            }
            
        }else {
            //其他部门人员
            if !isDepartmentData {
                return;
            }
            
            isDepartmentData = false
            if !isLoadOtherDepartData {
                self.loadData()
            }
            
        }
        
        listTable.reloadData()
    }
    //MARK: 请求列表数据
    /**
     type 查询类型（0:不限；1：本部门；2：非本部门）
     */
    func loadData()  {
        var params = Dictionary<String, Any>()
        params["app_token"] = sharePublicDataSingle.token
        params["keyword"] = searchView.text ?? ""
        params["type"] = (isDepartmentData) ? 1 : 2
        UserRequest.coachSearchUser(params: params, hadToast: true, fail: { (Error) in
                    print(Error.localizedDescription)
                }) {[weak self] (success) in
                    
                    print("获取部门列表\(success)");
                    
                    if let code = success["code"] {
                        if "\(code)" != "1" {
                            self?.showAlert(content: success["msg"] as! String)
                            return
                        }
                    }
                    
//                    获取部门列表["user_list": <__NSArray0 0x7fff8062d570>(
//
//                    )
//                    , "keyword": , "count": 0]
                    
                    let user_list = success["user_list"] as! [Dictionary<String, Any>]
                    
                    var list:Array<RLMObject> = []
                    
                    for any in user_list {
                        let model = FriendsModel.init(value: any)
                        list.append(model)
                    }
                    
                    
                    if !self!.isDepartmentData {
                        self?.isLoadOtherDepartData = true
                        self?.otherDepartDataArray =  list 
                    }else {
                        self?.isLoadDepartData = true
                        self?.departDataArray =  list
                    }
                    
                    self?.listTable.reloadData()
                    
                }
    }
    
    
    
    //刘海屏额外的高度
    let heightOfAddtionalHeader:CGFloat = {
        var heightOfAddtionalHeader = 0.0
        
        if UIDevice.current.isiPhoneXorLater() {
            heightOfAddtionalHeader = 24.0
        }
        return CGFloat(heightOfAddtionalHeader)
    }()
    
    //MARK:UISearchBarDelegate
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        self.view.endEditing(true)
        
        if searchBar.text!.count > 0 {
            self.loadData()
        }
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        self.view.endEditing(true)
    }
    /*
    // MARK: - Navigation
    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destination.
        // Pass the selected object to the new view controller.
    }
    */
}
extension UIDevice {
    //判断设备是不是iPhoneX以及以上
    
    public func isiPhoneXorLater() ->Bool {
        let screenHieght = UIScreen.main.nativeBounds.size.height
        
        if screenHieght == 2436 || screenHieght == 1792 || screenHieght == 2688 || screenHieght == 1624 {
            return true
        }
        
        return false
    }
}
//
//  SearchHistotyVC.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/16.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class SearchHistotyVC: BaseViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Do any additional setup after loading the view.
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    /*
    // MARK: - Navigation
    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */
}
//
//  GroupMemberVC.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/16.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
import Realm
class GroupMemberVC: BaseTableVC {
    
    //创建群组和添加成员共用  但是数据处理和UI还是有一些小区别 因此添加了一个字段 isCreatGroup
    //是否是创建群组
    var isCreatGroup:Bool?
    var rightBtn:UIButton?
    var isAddMember:Bool? //是添加 还是删除
    
    
    typealias back = (_ resultArray:Array<Any>)->()
   fileprivate var resultBlock : back?
    override func viewDidLoad() {
        super.viewDidLoad()
        
        
        if isCreatGroup == true {
           configUIWithCreatGroup()
        }
        else
        {
           configUIWithAddMember()
           
        }
        self.configUIWith(fromCellName: "BaseTableCell", fromIsShowSearch: true,fromSearchType: true ,fromCellHeight: 50)
        
       
        
        if self.isAddMember == false{
            
            /// 删除成员
            var array = NSArray.init(array: (self.memberArray)!)
            if array.count < 1 {
                return
            }
            let model :GroupUserModel = array.firstObject as! GroupUserModel
            self.memberArray?.removeAll()
            array = array.value(forKeyPath: "userid") as! NSArray
            
            let predicate = NSPredicate(format:"userid in %@ AND groupid ==%@", array,model.groupid)
           
            self.allDataArray =  GroupUserModel.allObjects().objects(with: predicate) as? RLMResults<RLMObject>
            self.setDataArray(dataArray:(self.allDataArray!))
            
            return
        }
        
        
        var params = Dictionary<String, Any>()
        params["app_token"] = sharePublicDataSingle.token
        UserRequest.friends(params: params, hadToast: true, fail: { (Error) in
            print(Error.localizedDescription)
        }) {[weak self] (success) in
            
            print("获取好友列表\(success)");
            
            if let code = success["code"] {
                if "\(code)" != "1" {
                    self?.showAlert(content: success["msg"] as! String)
                    return
                }
            }
            
            let strongSelf = self
            DispatchQueue.main.async{
                
                
                
                strongSelf?.allDataArray =  FriendsModel.allObjects() as? RLMResults<RLMObject>
                
                strongSelf?.setDataArray(dataArray:(strongSelf?.allDataArray!)!)
//                 strongSelf?.creatGroup()
                    if strongSelf?.allDataArray?.count == 0{
//                        strongSelf?.creatGroup()
                    }
                
                
                }
           
            
            
        }
        
    }
    
    /// 创建群组
    func creatGroup()
    {
        var params = Dictionary<String, Any>()
        params["app_token"] = sharePublicDataSingle.token
        params["group_name"] = "测试"
        params["userid_str"] = ""
        params["is_open"] = "1"
        GroupRequest.creat(params: params, hadToast: true, fail: { (error)  in
            print(error.localizedDescription)
        }, success: {[weak self] (success)  in
            
            print("创建群组成功",success)
//            self?.navigationController?.popToRootViewController(animated: true)
//            self?.creatSweep()
            if let code = success["code"] {
                if "\(code)" != "1" {
                               //{"code":40003,"msg":"登录令牌错误","data":null}
                    self?.showAlert(content: success["msg"] as! String)
                    return
                }
            }else {
                self?.getImageWithGroup(id:String.changeToString(inValue: success["groupId"] as Any))
            }
            
        })
        
    }
    
    
    /// 获取群组的二维码
    ///
    /// - Parameter id: 群组id
    func getImageWithGroup(id:String){
    
        var params = Dictionary<String, Any>()
        params["app_token"] = sharePublicDataSingle.token
        params["groupid"] = id
        GroupRequest.getQrCode(params: params, hadToast: true, fail: { (error) in
            
        }) { (success) in
           if let code = success["code"] {
               if "\(code)" != "1" {
                              //{"code":40003,"msg":"登录令牌错误","data":null}
                self.showAlert(content: success["msg"] as! String)
                return
               }
           }
            self.creatSweep(url: success["qr_url"] as! String)
        }
    }
    
    
    /// 创建群组二维码显示界面
    ///
    /// - Parameter url: 二维码图片地址
    func creatSweep(url:String)
    {
      let sweep = GroupSweepView.initWithImage(url: url)
      self.view.addSubview(sweep)
    }
    
    /// 创建群组UI
    func configUIWithCreatGroup()
    {
        self.title = "选择联系人"
        rightBtn = UIButton.init(type: .custom)
        rightBtn?.frame = CGRect.init(x: 0, y: 100, width: 60, height: 30)
        rightBtn?.setTitle("确定", for:.normal)
        rightBtn?.sizeToFit()
        let rightItem  = UIBarButtonItem.init(customView: rightBtn!)
        rightBtn?.addTarget(self, action: #selector(rightClick), for: .touchUpInside)
         rightItem.isEnabled = false
        self.navigationItem.rightBarButtonItem = rightItem
        
    }
    
    
    /// 添加成员UI
    func configUIWithAddMember()
    {
                self.view.backgroundColor = UIColor.black
                let titleLable = UILabel.init(frame: CGRect(x: (kScreenW-100)/2, y: 27, width: 100, height: 30))
                titleLable.text = "选择联系人"
                titleLable.textColor = UIColor.white
                self.view.addSubview(titleLable)
        
        
        
        
                let leftBtn = UIButton.init(type: .custom)
                leftBtn.frame = CGRect.init(x: 15, y: 27, width: 40, height: 30)
                leftBtn.setTitle("取消", for:.normal)
                self.view.addSubview(leftBtn)
                leftBtn.addTarget(self, action: #selector(leftClick), for: .touchUpInside)
        
        
                rightBtn = UIButton.init(type: .custom)
                rightBtn?.frame = CGRect.init(x: kScreenW-60, y: 27, width: 60, height: 30)
                rightBtn?.isEnabled = false
                rightBtn?.setTitle("确定", for:.normal)
                rightBtn?.setTitleColor(UIColor.lightGray, for: .normal)
                rightBtn?.sizeToFit()
                self.view.addSubview(rightBtn!)
                rightBtn?.addTarget(self, action: #selector(rightClick), for: .touchUpInside)
    }
    
    
    
    
    
    
    @objc func leftClick(){
    
        self.dismiss(animated: true, completion: nil)
    }
    
    @objc func rightClick(){
        
        
        if isCreatGroup == true {
            //创建群组
            if self.selectedArray?.count == 0 {
                return
            }
            
            let alert = UIAlertController.init(title: "群组名称", message: "请输入创建的群组名称", preferredStyle: .alert)
            alert.addTextField { (textField) in
                textField.placeholder = "请输入群组名称"
            }
            
            let cancelAction = UIAlertAction.init(title: "取消", style: .cancel) { (cancelAction) in
                let isOpenVC = GroupIsOpenVC()
                isOpenVC.userArray = self.selectedArray
                self.navigationController?.pushViewController(isOpenVC, animated: true)
            }
            
            let okAction = UIAlertAction.init(title: "确认", style: .default) { (okAction) in
                let isOpenVC = GroupIsOpenVC()
                isOpenVC.groupName = alert.textFields?.first?.text
                isOpenVC.userArray = self.selectedArray
                self.navigationController?.pushViewController(isOpenVC, animated: true)
            }
            
            alert.addAction(cancelAction)
            alert.addAction(okAction)
            self.present(alert, animated: true, completion: nil)
            
            
            return;
        }
        else if (isAddMember == false){
            //删除成员
        resultBlock?(selectedArray!)
        }
        else
        {
        //添加成员
        if resultBlock != nil  {
            if self.selectedArray?.count == 0 {
                return
            }
            var resultArray = Array<Any>()
            for i in 0...(selectedArray?.count)!-1 {
                
                let fModel = selectedArray?[i] as! FriendsModel
                let gModel = GroupUserModel()
                gModel.userid = fModel.userid
                gModel.avater = fModel.avater
                gModel.realname = fModel.realname
                resultArray.append(gModel)
            }
            
            
            resultBlock?(resultArray)
        }
        
        
        }
        
        self.navigationController?.popViewController(animated: true)
//        self.dismiss(animated: true, completion: nil)
    }
    
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if self.isAddMember == false{
            let model:GroupUserModel = self.dataArray![UInt(indexPath.row)] as! GroupUserModel
            
            if (self.memberArray?.contains(where: { (m) -> Bool in
                
                return m.userid == model.userid
                
            }) == true) {
                
                return
            }
            
            
            
            
            let index = self.selectedArray?.firstIndex(where: { (m) -> Bool in
                return (m as! GroupUserModel).userid == model.userid
            })
            if (index != nil) {
                self.selectedArray?.remove(at: index!)
            }
            else
            {
                self.selectedArray?.append(model)
                
            }
        }
        else{
        
            let model:FriendsModel = self.dataArray![UInt(indexPath.row)] as! FriendsModel
            
            if (self.memberArray?.contains(where: { (m) -> Bool in
                
                return m.userid == model.userid
                
            }) == true) {
                
                return
            }
            
            
            
            
            let index = self.selectedArray?.index(where: { (m) -> Bool in
                return (m as! FriendsModel).userid == model.userid
            })
            if (index != nil) {
                self.selectedArray?.remove(at: index!)
            }
            else
            {
                self.selectedArray?.append(model)
                
            }
        }
        
        
       if self.isShowSearch! {
        
        
        
        
        
            searchView?.configWithDataArray(array:selectedArray!)
        
                }
    tableView.reloadData()
      
    changeRightBtnStatus()
        
    }
    
    
    /// 改变右边按钮状态
    func changeRightBtnStatus(){
        if selectedArray?.count != 0 {
            let countStr = String.init(format: "确定(%d)", (selectedArray?.count)!)
            self.navigationItem.rightBarButtonItem?.isEnabled = true
            rightBtn?.setTitleColor(UIColor.white, for: .normal)
            rightBtn?.isEnabled = true
            rightBtn?.setTitle(countStr, for: .normal)
            rightBtn?.sizeToFit()
        }
        else
        {
            self.navigationItem.rightBarButtonItem?.isEnabled = false
            rightBtn?.isEnabled = false
            rightBtn?.setTitleColor(UIColor.lightGray, for: .normal)
            rightBtn?.setTitle("确定", for: .normal)
        }
    }
   
    
    
    override func searchDeleteItem(item: RLMObject) {
        
        let model = item as! FriendsModel
        
        if (self.memberArray?.contains(where: { (m) -> Bool in
            
            return m.userid == model.userid
            
        }) == true) {
            
            return
        }
        
        
        let index = self.selectedArray?.index(where: { (m) -> Bool in
            return (m as! FriendsModel).userid == model.userid
        })
        if (index != nil) {
            self.selectedArray?.remove(at: index!)
        }
        
       table?.reloadData()
        changeRightBtnStatus()
    }
    
    
    public func resultWithArray(resultArray:@escaping back)
    {
       resultBlock = resultArray
    }
}
//
//  GroupIsOpenVC.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/23.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class GroupIsOpenVC: BaseViewController {
    var userArray:Array<RLMObject>?
    var groupName:String?
    var isOpen = true
    @IBAction func btnClick(_ sender: UIButton) {
        rightImage.image = UIImage.init(named: "isClose_normal")
        leftImage.image = UIImage.init(named: "isOpen_normal")
        
        if sender.tag == 101 {
            isOpen = true
            rightImage.image = UIImage.init(named: "isClose_select")
        }else {
            isOpen = false
            leftImage.image = UIImage.init(named: "isOpen_select")
        }
    }
    
    
    @IBOutlet weak var rightBtn: UIButton!
    @IBOutlet weak var leftBtn: UIButton!
    @IBOutlet weak var deslable: UILabel!
    @IBOutlet weak var rightImage: UIImageView!
    @IBOutlet weak var leftImage: UIImageView!
    override func viewDidLoad() {
        super.viewDidLoad()
        
       self.view.backgroundColor = UIColor.groupTableViewBackground
       self.title = "创建群组"
       self.setRightBtnWithArray(items: ["确定"])
       
       self.deslable.layer.cornerRadius = 6
       self.deslable.clipsToBounds = true
        
       self.deslable.text = "\n提示：若您设置为【开放】，则企业成员可查找到该群组，并申请加入；若您设置为【私有】，则企业内部其他成员无法查找到该群，仅能通过扫描群二维码加入。               \n "
        
        // 设置行间距
        let style = NSMutableParagraphStyle()
        // 间隙
        style.lineSpacing = 5
        self.deslable.attributedText = NSAttributedString(string: self.deslable.text!,
                                    attributes: [NSAttributedString.Key.paragraphStyle: style])
        let bgView = UIView.init()
        bgView.backgroundColor = UIColor.white
        bgView.layer.cornerRadius = 6
        view.addSubview(bgView)
        
        bgView.mas_makeConstraints { [unowned self](make) in
            make?.left.equalTo()(self.deslable)?.offset()(-10)
            make?.right.equalTo()(self.deslable)?.offset()(10)
            make?.top.centerX()?.centerY()?.height()?.equalTo()(self.deslable)
        }
        
        view.sendSubviewToBack(bgView)
        
        leftImage.image = UIImage.init(named: "isOpen_select")
    }
    override func rightBtnClick(button: UIButton) {
       
        var params = Dictionary<String, Any>()
        params["app_token"] = sharePublicDataSingle.token
        
        params["group_name"] = ""
        if groupName != nil {
            params["group_name"] = groupName!
        }
        
        let idStr = (NSArray.init(array: userArray!).value(forKeyPath: "userid") as! NSArray).componentsJoined(by: ",")
        params["userid_str"] = idStr
        
        if isOpen {
            params["is_open"] = "1"
        } else {
           params["is_open"] = "0"
        }
        
        
       GroupRequest.creat(params: params, hadToast: true, fail: { (error)  in
       }, success: {[weak self] (success)  in
        if let code = success["code"] {
            if "\(code)" != "1" {
                self?.showAlert(content: success["msg"] as! String)
                return
            }
        }
        print("创建群组成功",success)
        
        if let gorupid = success["groupId"] {
            //群组成员信息groupID修改值
            self?.getGroupInfo(groupid: "\(gorupid)")
        }
        
       })
        
    }
    
    //获取群组信息，写入本地数据
    func getGroupInfo(groupid:String) {
        
        var params = Dictionary<String, Any>()
        params["app_token"] = sharePublicDataSingle.token
        params["groupid"] = groupid
        GroupRequest.info(params: params, hadToast: true, fail: { (Error) in
            
        }) { [weak self] (success) in
            if let code = success["code"] {
                if "\(code)" != "1" {
                    self?.showAlert(content: success["msg"] as! String)
                    return
                }
            }
            
           let group = GroupModel.init(value: success)
            DataOperation.addData(rlmObject: group)
            self?.navigationController?.popToRootViewController(animated: true)
        }
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    /*
    // MARK: - Navigation
    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */
}
//
//  GroupSettingViewController.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/9.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class GroupSettingViewController: BaseViewController {
    fileprivate var dataSourceArr = Array<Array<Dictionary<String, Any>>>()
    fileprivate var usersDataSourceArr  = Array<GroupUserModel>()
    var header : GroupSettingTableViewHeader!
    var headerView : UIView!
    var groupModel:GroupModel?
    var is_owner : Bool? //是否是群组
    var conversationModel:RCConversationModel?{
        
        didSet {
            groupModel = GroupModel.objects(with: NSPredicate.init(format: "groupid == %@",(conversationModel?.targetId)!)).firstObject() as! GroupModel?
         
            is_owner = (groupModel?.owner_id)! == sharePublicDataSingle.publicData.userid as String
            self.configData()
            self.configUI()
        }
    }
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        self.title = "群组信息"
        
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.configData()
        self.tableView.reloadData()
    }
    func configData() {
        let groupUserModels = GroupUserModel.objects(with: NSPredicate.init(format: "groupid == %@",(groupModel?.groupid)!)).sortedResults(usingKeyPath: "inputtime", ascending: true)
        for i in 0..<groupUserModels.count {
            let groupUserModel : GroupUserModel = groupUserModels[i] as! GroupUserModel
            usersDataSourceArr.append(groupUserModel)
        }
        dataSourceArr = [
            [["群组名称":groupModel?.group_name ?? ""],["群组二维码":""],["群组验证码":groupModel?.auth_code ?? ""],["群组开放性":groupModel?.is_open ?? ""]],
            [["置顶聊天":conversationModel?.isTop.hashValue ?? 0]]
        ]
    }
    
    func configUI() {
        header = GroupSettingTableViewHeader.init()
        header.myDelegate = self
        header.users = usersDataSourceArr
        header.isAllowedDeleteMember = is_owner
        headerView = UIView.init(frame: CGRect.init(x: 0, y: 0, width: SCREEN_WIDTH, height: header.collectionViewLayout.collectionViewContentSize.height))
        headerView.addSubview(header)
        header.mas_makeConstraints { (make) in
            make!.top.left().bottom().right().equalTo()(headerView)
        }
        self.tableView.tableHeaderView = headerView
        
        let footerView = UIView.init(frame: CGRect.init(x: 0, y: 0, width: SCREEN_WIDTH, height: 70))
        footerView.backgroundColor = UIColor.clear
        let delAndExitBtn = UIButton.init(frame: CGRect.init(x: 20, y: 20, width: SCREEN_WIDTH - 20 * 2, height: 40))
        delAndExitBtn.addTarget(self, action: #selector(exitBtnClick), for: .touchUpInside)
        delAndExitBtn.backgroundColor = UIColor.hexString(hexString: "2183DE")
        delAndExitBtn.layer.cornerRadius = 5.0
        if is_owner! {
            
            delAndExitBtn.setTitle("解散群组", for: .normal)
        }else{
            delAndExitBtn.setTitle("删除并退出", for: .normal)
        }
        delAndExitBtn.titleLabel?.textColor = UIColor.white
        delAndExitBtn.titleLabel?.font = FONT_16
        footerView.addSubview(delAndExitBtn)
        
        self.tableView.tableFooterView = footerView
        
        self.view.addSubview(self.tableView)
        
    }
    
    @objc func exitBtnClick() {
        if is_owner! {
            GroupRequest.dismiss(params: ["app_token":sharePublicDataSingle.token,"groupid":groupModel?.groupid ?? ""], hadToast: true, fail: { (error) in
                
            }, success: {  [weak self](dic) in
                print(dic)
                if let code = dic["code"] {
                    if "\(code)" != "1" {
                        self?.showAlert(content: dic["msg"] as! String)
                        return
                    }
                }
                if let strongSelf = self{
                    DispatchQueue.main.async {
                        let realm:RLMRealm = RLMRealm.default()
                        realm.beginWriteTransaction()
                        strongSelf.groupModel?.setValue( "1", forKey: "is_delete")
                        try? realm.commitWriteTransaction()
                                            
                        //                    RCIMClient.shared().clearMessages((strongSelf.conversationModel?.conversationType)!, targetId: strongSelf.conversationModel?.targetId)
                        //                    RCIMClient.shared().remove((strongSelf.conversationModel?.conversationType)!, targetId: strongSelf.conversationModel?.targetId)
                        //                    DataOperation.removeData(rlmObject: strongSelf.groupModel)
                        self?.navigationController?.popToRootViewController(animated: true)
                    }
                    
                }
            })
        }else{
            GroupRequest.quit(params: ["app_token":sharePublicDataSingle.token,"groupid":groupModel?.groupid ?? ""], hadToast: true, fail: { (error) in
                
            }, success: { [weak self](dic) in
                print(dic)
                if let code = dic["code"] {
                    if "\(code)" != "1" {
                        self?.showAlert(content: dic["msg"] as! String)
                        return
                    }
                }
                if let strongSelf = self{
                    DispatchQueue.main.async {
                        let realm:RLMRealm = RLMRealm.default()
                        realm.beginWriteTransaction()
                        strongSelf.groupModel?.setValue( "1", forKey: "is_delete")
                        try? realm.commitWriteTransaction()
                                            
                        //                    RCIMClient.shared().clearMessages((strongSelf.conversationModel?.conversationType)!, targetId: strongSelf.conversationModel?.targetId)
                        //                    RCIMClient.shared().remove((strongSelf.conversationModel?.conversationType)!, targetId: strongSelf.conversationModel?.targetId)
                        //                    DataOperation.removeData(rlmObject: strongSelf.groupModel)
                        self?.navigationController?.popToRootViewController(animated: true)
                    }
                }
            })
        }
    }
    
    
    //MARK: --------------------------- Getter and Setter --------------------------
    lazy var tableView: UITableView = {
        var tableView : UITableView = UITableView.init(frame: self.view.bounds)
        tableView.backgroundColor = UIColor.groupTableViewBackground
        tableView.dataSource  = self
        tableView.delegate    = self
        return tableView
    }()
}
//MARK: - UITableViewDataSource, UITableViewDelegate
extension GroupSettingViewController : UITableViewDataSource, UITableViewDelegate {
    func numberOfSections(in tableView: UITableView) -> Int {
        return dataSourceArr.count
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dataSourceArr[section].count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if indexPath.section == 0 && indexPath.row != 3 || indexPath.section == 1 && indexPath.row != 0 {
            let cell = GroupSettingWithArrowCell.cell(withTableView: tableView)
            if indexPath.section == 0 && indexPath.row == 1 {
                cell.detailLabel.isHidden = true
                cell.detailImage.isHidden = false
            }else{
                cell.detailLabel.isHidden = false
                cell.detailImage.isHidden = true
            }
            cell.model = dataSourceArr[indexPath.section][indexPath.row]
            return cell
        }else{
            let cell = GroupSettingWithSwitchCell.cell(withTableView: tableView)
            cell.delegate = self
            cell.model = dataSourceArr[indexPath.section][indexPath.row]
            return cell
        }
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
//        if indexPath.section == 0 && indexPath.row == 3 {
//            let detailStr = (dataSourceArr[indexPath.section][indexPath.row] ).first?.value as! String?
//            if detailStr == "未设置" {
//                return 44
//            }else{
//                let height = ((detailStr?.getTextHeight(font: FONT_14, width: SCREEN_WIDTH - LEFT_PADDING_GS * 2 - 15))! + 0.4) > 60 ? 50.5 : ((detailStr?.getTextHeight(font: FONT_14, width: SCREEN_WIDTH - LEFT_PADDING_GS * 2 - 15))! + 0.4)
//                return 44 + height + 5
//            }
//        }else{
            return 44
//        }
    }
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view = UIView.init()
        view.backgroundColor = UIColor.clear
        return view
    }
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 20
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        switch indexPath.section {
        case 0:
            switch indexPath.row {
            case 0:
                let groupNameEditVC = GroupNameEditViewController()
                groupNameEditVC.groupModel = groupModel
                self.navigationController?.pushViewController(groupNameEditVC, animated: true)
            case 1:
                let groupQRCodeVC = GroupQRCodeViewController()
                groupQRCodeVC.groupModel = groupModel
                self.navigationController?.pushViewController(groupQRCodeVC, animated: true)
                
            default:
                break
            }
        case 1:
            switch indexPath.row {
            case 1:
                
                  let histotyVC = SearchHistotyVC()
                  self.navigationController?.pushViewController(histotyVC, animated: true)
                
            default:
                break
            }
        default:
            break
        }
    }
}
//MARK: - GroupSettingTableViewHeaderDelegate
extension GroupSettingViewController : GroupSettingTableViewHeaderDelegate {
    func userItemDidClick(userId: String) {
        
    }
    func addBtnDidClick() {
        let addMemeberVc = GroupMemberVC()
        // 数组 header.users 包含群组成员model
//        addMemeberVc.mem
        addMemeberVc.isAddMember = true
        addMemeberVc.memberArray = header.users
        addMemeberVc.resultWithArray { [weak self]  (resultArray) in
            if let strongHSelf = self{
                for userModel in resultArray
                {
                    strongHSelf.header.users.append(userModel as! GroupUserModel)
                }
                strongHSelf.header.reloadData()
                strongHSelf.headerView.frame = CGRect.init(x: 0, y: 0, width: SCREEN_WIDTH, height:
                    strongHSelf.header.collectionViewLayout.collectionViewContentSize.height)
                strongHSelf.tableView.reloadData()
                
            }
        }
        
        addMemeberVc.modalPresentationStyle = .fullScreen
        self.present(addMemeberVc, animated: true, completion: nil)
    }
    func delBtnDidClick() {
        let addMemeberVc = GroupMemberVC()
        addMemeberVc.isAddMember = false
       
        var tempUsers : Array<GroupUserModel> = Array()
        for userModel in header.users {
            if userModel.userid != groupModel?.owner_id {
                tempUsers.append(userModel)
            }
        }
        addMemeberVc.memberArray = tempUsers
        addMemeberVc.resultWithArray { [weak self]  (resultArray) in
            if let strongHSelf = self{
                var tempUserIdsArr = Array<String>()
                var tempResultIdsArr = Array<String>()
                var tempDelArr = Array<Int>()
                
                for userModel in resultArray
                {
                    tempResultIdsArr.append((userModel as! GroupUserModel).userid)
                }
                
                for i in 0..<strongHSelf.header.users.count
                {
                    let userModel = strongHSelf.header.users[i]
                    if tempResultIdsArr.contains(userModel.userid){
                        tempDelArr.append(i)
                    }
                    tempUserIdsArr.append(userModel.userid)
                }
                for index in tempDelArr.reversed(){
                    strongHSelf.header.users.remove(at: index)
                }
                strongHSelf.header.reloadData()
                strongHSelf.headerView.frame = CGRect.init(x: 0, y: 0, width: SCREEN_WIDTH, height:
                    strongHSelf.header.collectionViewLayout.collectionViewContentSize.height)
                strongHSelf.tableView.reloadData()
                
            }
            
        }
        self.present(addMemeberVc, animated: true, completion: nil)
//        header.users.removeLast()
//        header.reloadData()
//        headerView.frame = CGRect.init(x: 0, y: 0, width: SCREEN_WIDTH, height: header.collectionViewLayout.collectionViewContentSize.height)
//        tableView.reloadData()
    }
}
extension GroupSettingViewController : GroupSettingWithSwitchCellDelegate {
    
    func onClickSwitchButton(swich: UISwitch, title: String) {
        switch title {
        case "群组开放性":
            GroupRequest.setOpen(params: ["app_token":sharePublicDataSingle.token,"groupid":groupModel?.groupid,"is_open":swich.isOn ? "1" : "0"], hadToast: true, fail: { (error) in
            }) { [weak self](dic) in
                if String.changeToString(inValue: (dic as! Dictionary)["code"]!) != "1"{
                    swich.isOn = !swich.isOn
                    self?.showAlert(content: dic["msg"] as! String)
                    return
                }
                if let strongSelf = self {
                    let realm:RLMRealm = RLMRealm.default()
                    realm.beginWriteTransaction()
                    strongSelf.groupModel?.setValue(swich.isOn ? "1" : "0", forKey: "is_open")
                    try? realm.commitWriteTransaction()
                }
            }
        case "置顶聊天":
            RCIMClient.shared().setConversationToTop((conversationModel?.conversationType)!, targetId: conversationModel?.targetId, isTop: swich.isOn)
            
        default:
            break
        }
    }
}
//
//  GroupSearchVC.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/22.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class GroupSearchVC: BaseViewController {
    var table:UITableView?
    var dataArray:Array<GroupModel>?
    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = "查找群组"
        configUI()
    }
    fileprivate func configUI()
    {
        dataArray = Array()
        let searchView = UISearchBar.init(frame: CGRect.init(x: 0, y: 64, width: kScreenW, height: 50))
        searchView.delegate = self
        self.view.addSubview(searchView)
        
        
        table = UITableView.init(frame: CGRect.init(x: 0, y: 64+50, width: kScreenW, height: kScreenH-64-50))
        self.view.addSubview(table!)
        table?.delegate = self;
        table?.dataSource = self;
        table?.tableFooterView = UIView.init()
        self.automaticallyAdjustsScrollViewInsets = false
    }
    
//         self.configUIWith(fromCellName: "BaseTableCell", fromIsShowSearch: true,fromSearchType: false ,fromCellHeight: 50)
//         configData()
//        self.allDataArray = FriendsModel.allObjects()
//        
//        //
//        self.setDataArray(dataArray: self.allDataArray!)
        // Do any additional setup after loading the view.
    
//    func configData(){
//    
//        self.allDataArray = GroupModel.allObjects()
//        self.setDataArray(dataArray: self.allDataArray!)
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
//    override func searchBarTextChangedWith(nowText: String) {
//        
//        if nowText.isEmpty {
//            self.dataArray = self.allDataArray
//        }
//        else
//        {
//            
//        let predicate = NSPredicate.init(format: "group_name Contains %@", argumentArray: ([nowText]))
//        self.dataArray = self.dataArray?.objects(with: predicate)
//        }
//        
//        self.table?.reloadData()
//      }
//    
//    
//    /// cell右边按钮点击事件
//    ///
//    /// - Parameter model: <#model description#>
//    override func cellRightBtnClick(model: RLMObject) {
//        
//    }
    /*
    // MARK: - Navigation
    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */
}
extension GroupSearchVC:UITableViewDelegate,UITableViewDataSource{
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        
            return 44
        }
    
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return dataArray != nil ?Int((dataArray?.count)!): 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        var cell:BaseTableCell? = tableView.dequeueReusableCell(withIdentifier: "cell") as! BaseTableCell?
        if cell == nil
        {
                cell = Bundle.main.loadNibNamed("BaseTableCell", owner: self, options: nil)?.last as! UITableViewCell? as! BaseTableCell?
        }
        
        if self.dataArray!.count > indexPath.row {
            let model:RLMObject = self.dataArray![indexPath.row]
            cell?.setValue(model, forKey: "model")
            cell?.delegate = self
        }
        
        return cell!
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
    {
        
        
    }
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        view.endEditing(true)
    }
    
}
extension GroupSearchVC:UISearchBarDelegate{
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        
        view.endEditing(true)
        var params = Dictionary<String, Any>()
        params["app_token"] = sharePublicDataSingle.token
        params["keyword"] = searchBar.text
        
        GroupRequest.search(params: params, hadToast: true, fail: { (e) in
            
        }, success: { (sdic) in
           
            if let code = sdic["code"] {
                if "\(code)" != "1" {
                    self.showAlert(content: sdic["msg"] as! String)
                    return
                }
            }
            
           self.dataArray?.removeAll()
           let array = sdic["list"] as! Array<Dictionary<String, Any>>
            if array.isEmpty{
            self.table?.reloadData()
             return
            }
            for i in 0...array.count-1  {
                let model = GroupModel()
                let dic:Dictionary = array[i]
               model.setValuesForKeys(dic)
             self.dataArray?.append(model)
           }
       self.table?.reloadData()
    })
    }
}
extension GroupSearchVC:BaseCellDelegate{
   
    func cellRightBtnClick(model: RLMObject) {
        let applyJoinGroupVc = ApplyJoinGroupViewController()
        applyJoinGroupVc.groupModel = model as? GroupModel
        self.navigationController?.pushViewController(applyJoinGroupVc, animated: true)
    }
    
}
//
//  GroupNameEditViewController.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/14.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class GroupNameEditViewController: BaseViewController {
    var groupModel:GroupModel?{
    
        didSet {
            
            inputTextField.text = groupModel?.group_name
            countLabel.text = "\((groupModel?.group_name.count)!)/10"
        }
    }
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        self.title = "群组名称"
        
        self.setRightBtnWithArray(items: ["完成"])
        self.view.addSubview(inputTextField)
        self.view.addSubview(countLabel)
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    override func rightBtnClick(button: UIButton) {
//        tcp.group.update
//        app_token
//        groupid
//        group_name
        GroupRequest.update(params: ["app_token":sharePublicDataSingle.token,"groupid":groupModel?.groupid,"group_name":inputTextField.text], hadToast: true, fail: { (error) in
            
        }) { [weak self](dic) in
            
            if let code = dic["code"] {
                if "\(code)" != "1" {
                    self?.showAlert(content: dic["msg"] as! String)
                    return
                }
            }
            if let strongSelf = self {
                let realm:RLMRealm = RLMRealm.default()
                realm.beginWriteTransaction()
                strongSelf.groupModel?.setValue(strongSelf.inputTextField.text, forKey: "group_name")
                try? realm.commitWriteTransaction()
                strongSelf.navigationController!.popViewController(animated: true)
            }
        }
    }
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        inputTextField.endEditing(true)
    }
    //MARK: --------------------------- Getter and Setter --------------------------
    fileprivate lazy var inputTextField: GroupNameEditTextField = {
        var inputTextField = GroupNameEditTextField.init(placeholder: "请输入群组名称")
        inputTextField.frame = CGRect.init(x: 15, y: NAV_HEIGHT + 15, width: SCREEN_WIDTH - 15 * 2, height: inputTF_height)
        inputTextField.delegate = self
        return inputTextField
    }()
    
    fileprivate lazy var countLabel: UILabel = {
        var countLabel = UILabel.init(frame: CGRect.init(x: SCREEN_WIDTH - 15 - 40, y: NAV_HEIGHT + 15 + inputTF_height + 5, width: 40, height: 30))
        countLabel.font = FONT_14
        countLabel.textColor = UIColor.gray
        countLabel.textAlignment = .right
        return countLabel
    }()
}
extension GroupNameEditViewController : UITextFieldDelegate {
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        var str = textField.text?.replacingCharacters(in: (textField.text?.changeToRange(from: range)!)!, with: string)
        if (str?.count)! > 10 {
            textField.text = str?.substring(to: (str?.index((str?.startIndex)!, offsetBy: 10))!)
            countLabel.text = "10/10"
            return false
        }
        countLabel.text = "\((str?.count)!)/10"
        return true
    }
    func textFieldShouldClear(_ textField: UITextField) -> Bool {
        countLabel.text = "0/10"
        return true
    }
}
//
//  GroupQRCodeViewController.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/23.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class GroupQRCodeViewController: BaseViewController {
    var groupModel:GroupModel?{
        
        didSet {
            
            self.getQrCodeWithGroupId(id: (groupModel?.groupid)!)
            headerImageView.sd_setImage(with: NSURL.init(string: groupModel?.icon_url != nil ? (groupModel?.icon_url)!  : " ") as URL?, placeholderImage: UIImage.init(named: "mine_avatar"))
            groupNameLabel.text = groupModel?.group_name
            let currentDate : Date = Date()
            let dateFormatter : DateFormatter = DateFormatter()
            dateFormatter.dateFormat = "M月d日"
            let endDate : Date = Date.init(timeInterval: 7*24*60*60, since: currentDate)
            let endDateStr : String = dateFormatter.string(from: endDate)
            bottomLabel.text = "该二维码7天内(\(endDateStr)前)有效,重新进入将更新"
        }
    }
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.darkGray
        self.title = "群二维码名片"
        
        self.view.addSubview(bgView)
        bgView.addSubview(headerImageView)
        bgView.addSubview(groupNameLabel)
        bgView.addSubview(seperateLine)
        bgView.addSubview(qrCodeImageView)
        bgView.addSubview(bottomLabel)
        
        bgView.mas_makeConstraints { (make) in
            make!.left.equalTo()(20)
            make!.right.equalTo()(-20)
            make!.top.equalTo()(NAV_HEIGHT + 80)
            make!.bottom.equalTo()(-120)
        }
        headerImageView.mas_makeConstraints { (make) in
            make!.left.equalTo()(20)
            make!.top.equalTo()(20)
            make!.size.equalTo()(CGSize.init(width: 45, height: 45))
        }
        groupNameLabel.mas_makeConstraints { [unowned self](make) in
            make!.left.equalTo()(self.headerImageView.mas_right)!.offset()(10)
            make!.right.equalTo()(-20)
            make!.centerY.equalTo()(self.headerImageView)
        }
        seperateLine.mas_makeConstraints { [unowned self](make) in
            make!.left.equalTo()(self.headerImageView)
            make!.right.equalTo()(-20)
            make!.top.equalTo()(self.headerImageView.mas_bottom)!.offset()(15)
            make!.height.equalTo()(0.5)
        }
        qrCodeImageView.mas_makeConstraints { (make) in
            make!.left.equalTo()(50)
            make!.top.equalTo()(self.headerImageView.mas_bottom)!.offset()(30)
            make!.right.equalTo()(-50)
            make!.height.equalTo()(SCREEN_WIDTH - 40 - 100)
        }
        bottomLabel.mas_makeConstraints { [unowned self](make) in
            make!.centerX.equalTo()(self.bgView)
            make!.top.equalTo()(self.qrCodeImageView.mas_bottom)!.offset()(20)
        }
    }
    func getQrCodeWithGroupId(id:String){
        
        var params = Dictionary<String, Any>()
        params["app_token"] = sharePublicDataSingle.token
        params["groupid"] = id
        GroupRequest.getQrCode(params: params, hadToast: true, fail: { (error) in
            
        }) { [weak self](success) in
            if let strongSelf = self{
                
                if let code = success["code"] {
                    if "\(code)" != "1" {
                        self?.showAlert(content: success["msg"] as! String)
                        return
                    }
                }
                strongSelf.qrCodeImageView.sd_setImage(with: NSURL.init(string: (success["qr_url"] as? String) != nil ? success["qr_url"] as! String : " ") as URL?, placeholderImage: UIImage.init(named: "mine_avatar"))
            }
        }
        
    }
    
    fileprivate lazy var bgView: UIView = {
        var bgView = UIView.init()
        bgView.backgroundColor = UIColor.white
        bgView.layer.cornerRadius = 2
        return bgView
    }()
    fileprivate var headerImageView: UIImageView = {
        var headerImageView = UIImageView.init()
        headerImageView.layer.cornerRadius = 4.0
        return headerImageView
    }()
    fileprivate var groupNameLabel: UILabel = {
        var groupNameLabel = UILabel.init()
        groupNameLabel.textColor = UIColor.black
        groupNameLabel.font = FONT_16
        return groupNameLabel
    }()
    fileprivate var seperateLine: UIView = {
        var seperateLine = UIView.init()
        seperateLine.backgroundColor = UIColor.lightGray
        return seperateLine
    }()
    fileprivate var qrCodeImageView: UIImageView = {
        var qrCodeImageView = UIImageView.init()
        return qrCodeImageView
    }()
    fileprivate var bottomLabel: UILabel = {
        var bottomLabel = UILabel.init()
        bottomLabel.textColor = UIColor.darkGray
        bottomLabel.font = FONT_12
        return bottomLabel
    }()
}
//
//  GroupNoticeEditViewController.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/20.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class GroupNoticeEditViewController: BaseViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        self.title = "群公告"
        self.setRightBtnWithArray(items: ["完成"])
        
        self.view.addSubview(inputTextView)
        inputTextView.mas_makeConstraints { (make) in
            make!.top.equalTo()(20)
            make!.left.equalTo()(10)
            make!.right.equalTo()(-10)
            make!.height.equalTo()(300)
        }
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    override func rightBtnClick(button: UIButton) {
        self.navigationController!.popViewController(animated: true)
    }
    
    lazy var inputTextView: UITextView = {
        var inputTextView = UITextView.init()
        inputTextView.font = FONT_16
        inputTextView.textColor = UIColor.black
        return inputTextView
    }()
}
//
//  GroupListViewController.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/2/28.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class GroupListViewController: RCConversationListViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
                
        view.backgroundColor = UIColor.white
        self.title = "群组列表"
        //修改导航栏背景色
        self.navigationController?.navigationBar.barTintColor = UIColor.hexString(hexString: "333333")
        //修改导航栏按钮颜色
        self.navigationController?.navigationBar.tintColor = UIColor.white
        //修改导航栏文字颜色
        self.navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]
        
        self.makeNavigationBackBtn()
        self.setRightBtnWithArray(items: [UIImage.init(named: "nav_add")])
        self.setDisplayConversationTypes([RCConversationType.ConversationType_GROUP.rawValue])
        //        self.setCollectionConversationType([RCConversationType.ConversationType_GROUP.rawValue])
        self.showConnectingStatusOnNavigatorBar = true
        //                self.refreshConversationTableViewIfNeeded()
        self.conversationListTableView.tableFooterView = self.footView
//        self.footLabel.text = "9个群组"
//        mainTableView.tableFooterView = self.footView
//        view.addSubview(mainTableView)
//        RCIM.shared().initWithAppKey("m7ua80gbm7bgm")
//        RCIM.shared().initWithAppKey("qf3d5gbjqpxeh")
        
//        RCIM.shared().connect(withToken: "QjOJ1HmIeLx/djdJWjJLEq01ibRUkx5u43yhw5p9sIJ1Gzd/ZtB7c+x51YXnMt9+O3QyP4bYCQc=", success: { (userId) in
//            print("登陆成功。当前登录的用户ID：\(userId)")
//        self.footLabel.text = "\(self.conversationListDataSource.count)个群组"
//        }, error: { (status) in
//            print("登陆的错误码为:\(status)")
//        }) {
//            print("token错误")
//        }
        
//        vGrq8dIdrbwP12fNpzuNjAuG3tBEDnpU3tFaQ1AXlym5UhyJM8YFEjSjwExHl1Ufndemu86S3L0yDc5koEsXNA==    003
//        oHnV7O0HSy7n9NIF0l8jrAuG3tBEDnpU3tFaQ1AXlynh8NXb9ekqzXpo4NhCEz6I3u2slqAixQ0yDc5koEsXNA==    002
//        PublicDataSingle.sharePublicDataSingle
//        sharePublicDataSingle
        
//        UserRequest.getToken(params: ["app_token":sharePublicDataSingle.token], hadToast: true, fail: { (error) in
//            print(error)
//        }) { (dis) in
//            print(dis)
//            sharePublicDataSingle.publicData.userid = dis["userid"] as! String
//            sharePublicDataSingle.publicData.avater = dis["avater"] as! String
//            sharePublicDataSingle.publicData.corpid = dis["corpid"] is NSNumber ? (dis["corpid"] as! NSNumber).stringValue : dis["corpid"] as! String
//            sharePublicDataSingle.publicData.realname = dis["realname"] as! String
//            sharePublicDataSingle.publicData.access_token = dis["access_token"] as! String
//            sharePublicDataSingle.publicData.im_token = dis["im_token"] as! String
//            DataBaseOperation.initDataBase()
//            
//            UserRequest.initData(params: ["app_token":sharePublicDataSingle.token,"updatetime":"0"], hadToast: true, fail: { (error) in
//                print(error)
//            }, success: { (dic) in
//                print(dic)
////                let oncRCId = ((dic["groupList"] as! Array)[0])["groupid"] as! String
////                let oneRc = RCIMClient.shared().getConversation(RCConversationType.ConversationType_GROUP, targetId: oncRCId)
////                print("\(oneRc)")
//                RCIM.shared().connect(withToken: sharePublicDataSingle.publicData.im_token, success: { (userId) in
//                    print("登陆成功。当前登录的用户ID：\(userId)")
//                    DispatchQueue.main.async {
//                        self.footLabel.text = "\(self.conversationListDataSource.count)个群组"
//                    }
//                    let coList = RCIMClient.shared().getConversationList([1,2,3,4,5,6])
//                    print(coList)
//                    let oncRCIdDic = ((dic["groupList"] as! Array)[0]) as! Dictionary<String,Any>
//                    let oncRCId = oncRCIdDic["groupid"] as! String
////                    let oneRc = RCIMClient.shared().getConversation(RCConversationType.ConversationType_GROUP, targetId: oncRCId)
//                    let oneRc = RCIMClient.shared().getLatestMessages(RCConversationType.ConversationType_GROUP, targetId: oncRCId, count: 100)
//                    print("\(oneRc)")
//                }, error: { (status) in
//                    print("登陆的错误码为:\(status)")
//                }) {
//                    print("token错误")
//                }
//            })
        
//                RCIM.shared().connect(withToken: sharePublicDataSingle.publicData.im_token, success: { (userId) in
//                    print("登陆成功。当前登录的用户ID：\(userId)")
//                    DispatchQueue.main.async {
//                        let results = GroupModel.allObjects()
//                        self.footLabel.text = "\(results.count)个群组"
//
//                        self.refreshConversationTableViewIfNeeded()
//                        
//                    }
//                }, error: { (status) in
//                    print("登陆的错误码为:\(status)")
//                }) {
//                    print("token错误")
//                }
//            UserRequest.userInfo(params: ["appToken":sharePublicDataSingle.token,"userid":sharePublicDataSingle.publicData.userid], hadToast: true, fail: { (error) in
//                print(error)
//            }, success: { (dic) in
//                print(dic)
//            })
//            UserRequest.userList(params: ["userIdStr":[664,665],"appToken":sharePublicDataSingle.token], hadToast: true, fail: { (error) in
//                print(error)
//            }, success: { (dic) in
//                print(dic)
//            })
//            RCIM.shared().connect(withToken: sharePublicDataSingle.publicData.im_token, success: { (userId) in
//                print("登陆成功。当前登录的用户ID：\(userId)")
//                DispatchQueue.main.async {
//                    self.footLabel.text = "\(self.conversationListDataSource.count)个群组"
//                }
//            }, error: { (status) in
//                print("登陆的错误码为:\(status)")
//            }) {
//                print("token错误")
//            }
//        }
       
    }
    override func rightBtnClick(button: UIButton) {
        UIApplication.shared.keyWindow?.addSubview(comboboxView!)
    }
    private func makeNavigationBackBtn() {
        let backBtn = UIButton.init(frame: CGRect.init(x: 0, y: 0, width: kNavBackWidth, height: kNavBackHeight))
        backBtn.addTarget(self, action: #selector(backBtnDidClick), for: .touchUpInside)
        backBtn.setImage(UIImage.init(named: "nav_back"), for: .normal)
        backBtn.sizeToFit()
        let leftBarButtonItem = UIBarButtonItem.init(customView: backBtn)
        self.navigationItem.leftBarButtonItem = leftBarButtonItem
    }
    //左上角返回按钮点击事件
    @objc func backBtnDidClick() {
        self.dismiss(animated: true) {
            //断开融云链接
            RCIM.shared().logout()
        }
    }
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    //重写RCConversationListViewController的onSelectedTableRow事件
    override func onSelectedTableRow(_ conversationModelType: RCConversationModelType, conversationModel model: RCConversationModel!, at indexPath: IndexPath!) {
        //打开会话界面
        if conversationModelType == RCConversationModelType.CONVERSATION_MODEL_TYPE_CUSTOMIZATION {
//            let chat = RongTestVC(conversationType: model.conversationType, targetId: model.targetId)
//            chat?.title = model.conversationTitle
//           
//            self.navigationController?.pushViewController(chat!, animated: true)
            
            let tabBarVc : TMTabbarController = TMTabbarController()
            tabBarVc.groupModel = model
            self.navigationController?.pushViewController(tabBarVc, animated: true)
            
        }
    }
    override func willReloadTableData(_ dataSource: NSMutableArray!) -> NSMutableArray! {
//        super.willReloadTableData(dataSource)
        
        let results = GroupModel.allObjects().sortedResults(usingKeyPath: "inputtime", ascending: false)
        
        var tempArrM = Array<String>()
        
        for i in 0..<dataSource.count {
            
            let model : RCConversationModel = dataSource[i] as! RCConversationModel
            
            model.conversationModelType = RCConversationModelType.CONVERSATION_MODEL_TYPE_CUSTOMIZATION
            let models = GroupModel.objects(with: NSPredicate.init(format: "groupid == %@",model.targetId))
            
            var result : GroupModel?
            
            if models.count > 0 {
                result = models.firstObject() as! GroupModel?
            }
//            result : GroupModel? = GroupModel.objects(with: NSPredicate.init(format: "groupid == %@",model.targetId)).firstObject() as! GroupModel?
            if result == nil {
                //不存在本地数据库时
                print("本地不存在数据\(model.targetId!)")
            }
            model.conversationTitle = result?.group_name
//            let imageArr : NSMutableArray = [result?.icon_url as Any]
            model.extend = result?.icon_url
            model.topCellBackgroundColor = UIColor.hexString(hexString: "F6F6F6")
            model.cellBackgroundColor = UIColor.white
        
            tempArrM.append(model.targetId)
        }
        //遍历本地数据库数据
        for i in 0..<results.count {
            
            let groupModel : GroupModel = results[i] as! GroupModel
            
            //融云端数据不包含本地数据时
            if !tempArrM.contains(groupModel.groupid){
                
                if groupModel.is_delete == "0" {
                    let model = RCConversationModel.init()
                    model.conversationModelType = RCConversationModelType.CONVERSATION_MODEL_TYPE_CUSTOMIZATION
                    //                let imageArr : NSMutableArray = [groupModel.icon_url]
                    model.extend = groupModel.icon_url
                    model.conversationType = .ConversationType_GROUP
                    model.targetId = groupModel.groupid
                    model.conversationTitle = groupModel.group_name
                    model.unreadMessageCount = 0
                    model.isTop = false
                    model.topCellBackgroundColor = UIColor.hexString(hexString: "F6F6F6")
                    model.cellBackgroundColor = UIColor.white
                    model.receivedStatus = .ReceivedStatus_UNREAD
                    model.sentStatus = .SentStatus_SENDING
                    model.receivedTime = 0
                    model.sentTime = 0
                    model.draft = ""
                    model.objectName = ""
                    model.senderUserId = ""
                    model.lastestMessageId = 0
                    model.lastestMessage = RCMessageContent.init()
                    model.lastestMessageDirection = .MessageDirection_SEND
                    model.jsonDict = nil
                    model.hasUnreadMentioned = false
                    dataSource.add(model)
                }
                
            }else {
                if groupModel.is_delete == "1" {
                    
                    if dataSource.contains(where: { (m) -> Bool in
                        return (m as! RCConversationModel).targetId == groupModel.groupid
                    }) {
                         let models = dataSource.filtered(using: NSPredicate.init(format: "targetId == %@",groupModel.groupid))
                        dataSource.removeObjects(in: models)
                        
                    }
                    
                    
                   
                }
            }
        }
        self.conversationListDataSource = dataSource
        DispatchQueue.main.async {
             self.footLabel.text = "\(dataSource.count)个群组"
        }
        
        return dataSource
    }
    
    
    override func rcConversationListTableView(_ tableView: UITableView!, heightForRowAt indexPath: IndexPath!) -> CGFloat {
        return 64
    }
    override func rcConversationListTableView(_ tableView: UITableView!, cellForRowAt indexPath: IndexPath!) -> RCConversationBaseCell! {
        let cell = GroupListCell.cell(withTableView: tableView)
        if self.conversationListDataSource.count > indexPath.row {
            cell.setDataModel((self.conversationListDataSource![indexPath.row] as! RCConversationModel))
        }
        
        return cell
    }
    override func didReceiveMessageNotification(_ notification: Notification!) {
      
        if notification.object is RCMessage {
            let message = notification.object as! RCMessage
            print(message)
        }
        self.refreshConversationTableViewIfNeeded()
    }
    
    
    /*!
    左滑删除自定义会话时的回调
    @param tableView       当前TabelView
    @param editingStyle    当前的Cell操作，默认为UITableViewCellEditingStyleDelete
    @param indexPath       该Cell对应的会话Cell数据模型在数据源中的索引值
    @discussion 自定义会话Cell在删除时会回调此方法，您可以在此回调中，定制删除的提示UI、是否删除。
    如果确定删除该会话，您需要在调用RCIMClient中的接口删除会话或其中的消息，
    并从conversationListDataSource和conversationListTableView中删除该会话。
    */
    override func rcConversationListTableView(_ tableView: UITableView!, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath!) {
        
        let model = self.conversationListDataSource![indexPath.row] as! RCConversationModel;
        RCIMClient.shared()?.deleteMessages(model.conversationType, targetId: model.targetId, success: {
            DispatchQueue.main.async {
                
                let groupModels = GroupModel.objects(with: NSPredicate.init(format: "groupid == %@",(model.targetId)!))
                
                var groupModel:GroupModel?
                if groupModels.count > 0 {
                    groupModel = (groupModels.firstObject() as! GroupModel)
                    DataOperation.removeData(rlmObject: groupModel)
                }
                
                self.conversationListDataSource.removeObject(at: indexPath.row)
                self.footLabel.text = "\(self.conversationListDataSource.count)个群组"
                self.conversationListTableView.reloadData()
            }
        
        }, error: { (erroCode) in
            
        })
    }
    
//    - (void)rcConversationListTableView:(UITableView *)tableView
//                     commitEditingStyle:(UITableViewCellEditingStyle)editingStyle
//                      forRowAtIndexPath:(NSIndexPath *)indexPath;
//
   
    /*
    //MARK: --------------------------- Getter and Setter --------------------------
    /// tableview
    fileprivate lazy var mainTableView : UITableView = {
        var mainTabView : UITableView = UITableView.init(frame: CGRect(x: 0, y: 0, width: self.view.frame.size.width, height: self.view.frame.size.height))
        mainTabView.backgroundColor = UIColor.groupTableViewBackground
        mainTabView.rowHeight   = 64
        mainTabView.dataSource  = self
        mainTabView.delegate    = self
        return mainTabView
    }()
     */
    lazy var footView: UIView = {
        var footView : UIView = UIView.init(frame: CGRect(x: 0, y: 0, width: self.view.frame.size.width, height: 40))
        var separateLine : UIView = UIView.init(frame: CGRect(x: 0, y: 0, width: self.view.frame.size.width, height: 0.5))
        separateLine.backgroundColor = separateLine_Color
        footView.addSubview(separateLine)
        footView.addSubview(self.footLabel)
        return footView
    }()
    lazy var footLabel: UILabel = {
        var footLabel : UILabel = UILabel.init(frame: CGRect(x: 0, y: 0, width: self.view.frame.size.width, height: 40))
        footLabel.font = FONT_14
        footLabel.textColor = UIColor.darkGray
        footLabel.textAlignment = .center
        return footLabel
    }()
    lazy var comboboxView: ComboboxView? = {
        var comboboxView = ComboboxView.init(titles: ["创建群组","查找群组"], imageNames: [["group_add","search_white"],["group_add","search_white"]], bgImgName: "combobox", frame: CGRect.init(x: SCREEN_WIDTH - 100 - 10, y: 64, width: 100, height: (oneRow_height * 2 + TOP_PADDING + 1)))
        comboboxView.delegate = self
        return comboboxView
    }()
}
extension GroupListViewController : ComboboxViewDelegate {
    func comboboxViewOneRowClick(button: UIButton) {
        switch button.tag {
        case 10:
            //创建群组
//            GroupCreateVC,GroupMemberVC
            let addMemeberVc = GroupCreateVC()
//            addMemeberVc.isCreatGroup = true
//            addMemeberVc.resultWithArray { (resultArray) in
//
//            }
            self.navigationController?.pushViewController(addMemeberVc, animated: true)
        case 11:
            
            //搜索群组
            let search = GroupSearchVC()
            self.navigationController?.pushViewController(search, animated: true)
            
            
            
            break
            
        default:
            break
        }
    }
}
/*
//MARK: --------------------------- TableViewDelegate TableViewDataSource --------------------------
extension GroupListViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 9
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = GroupListCell.cell(withTableView: tableView)
        cell.model = String(indexPath.row + 1)
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
//        RCIM.shared().initWithAppKey("m7ua80gbm7bgm")
//        RCIM.shared().connect(withToken: "MjQqsfL9QMLYUd2X3XTT/1B2V+2Y3XGjyhArGfi6/pMfyDKJUVq0bT/evBgpGQxSXva54fobkQu8Ck4pHtVifw==", success: { (userId) in
//            print("登陆成功。当前登录的用户ID：\(userId)")
//            let rcb = RCConversationViewController.init(conversationType: RCConversationType.ConversationType_PRIVATE, targetId: "2222")
//            DispatchQueue.main.async {
//                self.navigationController?.pushViewController(rcb!, animated: true)
//            }
//        }, error: { (status) in
//            print("登陆的错误码为:\(status)")
//        }) {
//            print("token错误")
//        }
        //新建一个聊天会话View Controller对象,建议这样初始化
        let groupChat = RongTestVC.init(conversationType: .ConversationType_GROUP, targetId: "qunzu1")
        //设置会话的类型，如单聊、讨论组、群聊、聊天室、客服、公众服务会话等
//        chat.conversationType = ConversationType_PRIVATE;
        //设置会话的目标会话ID。（单聊、客服、公众服务会话为对方的ID，讨论组、群聊、聊天室为会话的ID）
//        chat.targetId = @"targetIdYouWillChatIn";
        
        //设置聊天会话界面要显示的标题
        groupChat?.title = "群组1"
        //显示聊天会话界面
       self.navigationController?.pushViewController(groupChat!, animated: true)
    }
}
*/
//
//  ApplyJoinGroupViewController.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/16.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class ApplyJoinGroupViewController: BaseViewController {
    var groupModel:GroupModel?
    var isAuthCode : Bool? //是否是验证码入群
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        self.title = "申请加群"
        isAuthCode = true
        
        self.setRightBtnWithArray(items: ["发送"])
        self.automaticallyAdjustsScrollViewInsets = false
        self.view.addSubview(inputTextView)
        self.view.addSubview(bottomBtn)
        inputTextView.mas_makeConstraints { (make) in
            make!.left.equalTo()(15)
            make!.top.equalTo()(NAV_HEIGHT + 15)
            make!.width.equalTo()(SCREEN_WIDTH - 15 * 2)
            make!.height.equalTo()(inputTV_height_MIN)
        }
        bottomBtn.mas_makeConstraints { [unowned self](make) in
            make!.right.equalTo()(-15)
            make!.top.equalTo()(self.inputTextView.mas_bottom)!.offset()(5)
        }
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    override func rightBtnClick(button: UIButton) {
        if isAuthCode! {
            GroupRequest.groupJoinByCode(params: ["app_token":sharePublicDataSingle.token,"groupid":groupModel?.groupid,"auth_code":inputTextView.text], hadToast: true, fail: { (error) in
                
            }, success: { (dic) in
                if let code = dic["code"] {
                    if "\(code)" != "1" {
                        self.showAlert(content: dic["msg"] as! String)
                        return
                    }
                }
                self.navigationController!.popViewController(animated: true)
            })
        }else{
            GroupRequest.groupJoinApply(params: ["app_token":sharePublicDataSingle.token,"groupid":groupModel?.groupid,"msg":inputTextView.text], hadToast: true, fail: { (error) in
                
            }, success: { (dic) in
                if let code = dic["code"] {
                    if "\(code)" != "1" {
                        self.showAlert(content: dic["msg"] as! String)
                        return
                    }
                }
                self.navigationController!.popViewController(animated: true)
            })
        }
        
    }
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        inputTextView.endEditing(true)
    }
    
    //MARK: --------------------------- Getter and Setter --------------------------
    fileprivate lazy var inputTextView: ApplyJoinGroupTextView = {
        var inputTextView = ApplyJoinGroupTextView.init(frame: CGRect.init(x: 15, y: NAV_HEIGHT + 15, width: SCREEN_WIDTH - 15 * 2, height: inputTV_height_MIN), textContainer: nil)
        inputTextView.placeholder = "请输入群组验证码,直接入群"
        return inputTextView
    }()
    
    fileprivate lazy var bottomBtn: UIButton = {
        var bottomBtn = ApplyJoinGroupBottomBtn.init()
        bottomBtn.setTitle("没有群组验证码点击这里~~", for: .normal)
        bottomBtn.setTitleColor(UIColor.hexString(hexString: "2183DE"), for: .normal)
        bottomBtn.titleLabel?.font = FONT_14
        bottomBtn.addTarget(self, action: #selector(bottomBtnClick), for: .touchUpInside)
        return bottomBtn
    }()
}
extension ApplyJoinGroupViewController {
    @objc func bottomBtnClick(button:UIButton) {
        inputTextView.text = ""
        inputTextView.placeholderLabel.isHidden = false
        if (button.titleLabel?.text?.contains("没有"))! {
            isAuthCode = false
            inputTextView.placeholder = "请输入您的附加信息:"
             bottomBtn.setTitle("我有群组验证码点击这里~~", for: .normal)
            inputTextView.mas_updateConstraints({ (make) in
                make!.height.equalTo()(inputTV_height_MAX)
            })
        }else{
            isAuthCode = true
            inputTextView.placeholder = "请输入群组验证码,直接入群"
             bottomBtn.setTitle("没有群组验证码点击这里~~", for: .normal)
            inputTextView.mas_updateConstraints({ (make) in
                make!.height.equalTo()(inputTV_height_MIN)
            })
        }
    }
}
//
//  SmallTalkVC.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/9.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class SmallTalkVC: RCConversationViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        self.displayUserNameInCell = true
        RCIM.shared()?.globalMessageAvatarStyle = .USER_AVATAR_CYCLE
        NotificationCenter.default.addObserver(self, selector: #selector(click), name: UIResponder.keyboardWillHideNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(clickshow), name: UIResponder.keyboardWillShowNotification, object: nil)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
         let predicate = NSPredicate.init(format: "groupid == %@", argumentArray: [self.targetId])
        let allModels = GroupModel.objects(with: predicate)
        if allModels.count > 0 {
            let gModel:GroupModel = allModels.firstObject() as! GroupModel
            if gModel != nil {
                self.tabBarController?.title = gModel.group_name
            }
        }
        
    }
    
    override func viewDidAppear(_ animated: Bool) {
        self.view.frame = CGRect.init(x: 0, y: -49, width:kScreenW, height: kScreenH)
        self.view.backgroundColor = UIColor.white
        self.conversationMessageCollectionView.frame = CGRect.init(x: 0, y: 49, width: kScreenW, height: kScreenH-49-49)
        self.scrollToBottom(animated: false)
        refreshUserInfoOrGroupInfo()
    }
    
    
    
    //MARK:----------------------键盘通知----------------------
    @objc func click(notification: NSNotification)
    {
        
        if self.chatSessionInputBarControl.frame.origin.y>kScreenH-49{
            self.view.frame = CGRect.init(x: 0, y: 0, width:kScreenW, height: kScreenH)
        }
        else
        {
            self.view.frame = CGRect.init(x: 0, y: -49, width:kScreenW, height: kScreenH)
        }
       
    }
    
    @objc func clickshow(notification: NSNotification)
    {
        self.view.frame = CGRect.init(x: 0, y: 0, width:kScreenW, height: kScreenH)
    }
    
    /// 点击头像 响应事件
    ///
    /// - Parameter userId: <#userId description#>
    override func didTapCellPortrait(_ userId: String!) {
        
        print("点击了用户头像--用户id--"+userId)
    }
    
    
    
    /// 刷新用户信息 做头像  名称的刷新
    func  refreshUserInfoOrGroupInfo(){
    
        
        if self.conversationType == .ConversationType_GROUP {
            let predicate = NSPredicate.init(format: "groupid == %@", argumentArray: [self.targetId])
            let groupUser =  GroupUserModel.objects(with: predicate)
            if groupUser.count < 1 {
                return
            }
            for i in 0...groupUser.count-1 {
                    let gModel:GroupUserModel = groupUser.object(at: i) as! GroupUserModel
                    let userModel = RCUserInfo.init()
                    userModel.userId = gModel.userid
                    userModel.name = gModel.realname
                    if gModel.avater.isEmpty {
                        userModel.portraitUri = "mine_avatar"
                    } else {
                        userModel.portraitUri = gModel.avater
                    }
                    
                    RCIM.shared().refreshUserInfoCache(userModel, withUserId: userModel.userId)
            }
            
            
        }
     }
}
//
//  ThemeChatVC.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/9.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class ThemeChatVC: RCConversationViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        
        NotificationCenter.default.addObserver(self, selector: #selector(click), name: UIResponder.keyboardWillHideNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(clickshow), name: UIResponder.keyboardWillShowNotification, object: nil)
        
    }
    
    
    
    override func viewDidAppear(_ animated: Bool) {
        self.view.frame = CGRect.init(x: 0, y: -49, width:kScreenW, height: kScreenH)
        self.view.backgroundColor = UIColor.white
        self.conversationMessageCollectionView.frame = CGRect.init(x: 0, y: 49+49, width: kScreenW, height: kScreenH-49-50-44)
        self.scrollToBottom(animated: false)
    }
    
    
    
    //MARK:----------------------键盘通知----------------------
    @objc func click(notification: NSNotification)
    {
        if self.chatSessionInputBarControl.frame.origin.y>kScreenH-49{
            self.view.frame = CGRect.init(x: 0, y: 0, width:kScreenW, height: kScreenH)
        }
        else
        {
            self.view.frame = CGRect.init(x: 0, y: -49, width:kScreenW, height: kScreenH)
            self.conversationMessageCollectionView.frame = CGRect.init(x: 0, y: 49+49, width: kScreenW, height: kScreenH-49-50-44)
        }
    }
    
    @objc func clickshow(notification: NSNotification)
    {
        self.view.backgroundColor = UIColor.groupTableViewBackground
        //MARK:----------------------暂时这么写 35  没明白这个高度----------------------
        self.view.frame = CGRect.init(x: 0, y: 0, width:kScreenW, height: kScreenH)
        self.conversationMessageCollectionView.frame = CGRect.init(x: 0, y: 49+49-35, width: kScreenW, height: kScreenH-49-50-44)
        self.scrollToBottom(animated: false)
    }
    
    override func didLongTouchMessageCell(_ model: RCMessageModel!, in view: UIView!) {
        
        let menu = CellMenuView.configWith(inview: view)
        menu.menuClickWithType(type: { (type) in
            print(type)
        })
    }
    
    
    
    /// 点击头像 响应事件
    ///
    /// - Parameter userId: <#userId description#>
    override func didTapCellPortrait(_ userId: String!) {
        
       print("点击了用户头像--用户id--"+userId)
    }
    
    
}
//
//  TMTabbarController.swift
//  TMSwiftLearn
//
//  Created by harry on 17/2/7.
//  Copyright © 2017年 timer. All rights reserved.
//
import UIKit
//tabbar高度
let kTabBarHeight :Float = 49;
let kScreenW = UIScreen.main.bounds.width
let kScreenH = UIScreen.main.bounds.height
class TMTabbarController: UITabBarController
{
    
    var currentBtn:TMTabbarButton?
    var groupModel:RCConversationModel?{
    
        didSet {
            creatChildViewControllers()
        }
    }
    
    lazy var titleArray:[String] =
    {
//       let array = ["闲聊","主题","文件","公告"]
        let array = ["闲聊","公告"]
       return array
    
    }()
    
//    lazy var vcArray:[String] =
//        {
//            let array = ["ViewController","ViewController","ViewController","ViewController"]
//            return array
//            
//    }()
    
    lazy var imageNomalArray:[String] =
    {
            let array = ["tab_main_normal","tab_main_normal","tab_main_normal","tab_main_normal","tab_main_normal"]
            return array
            
    }()
    
    
    lazy var imageSelectArray:[String] =
        {
            let array = ["tab_main_selected","tab_main_selected","tab_main_selected","tab_main_selected","tab_main_selected"]
            return array
            
    }()
    
    
    
    lazy var bgImageView :UIImageView =
        {
            let img = UIImageView(image: UIImage(named: "find_radio_default"))
            img.contentMode = .scaleAspectFill
            img.layer.masksToBounds = true
            img.isUserInteractionEnabled = true
            return img
            
    }()
    
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        tabBar.isHidden = true
        creatTab()
        self.setRightBtnWithArray(items: [UIImage.init(named: "nav_groupSetting")])
//        self.navigationController?.setNavigationBarHidden(true, animated: true)
        // Do any additional setup after loading the view.
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
//         self.navigationController?.setNavigationBarHidden(true, animated: true)
    }
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
//        self.navigationController?.setNavigationBarHidden(false, animated: true)
    }
    override func didReceiveMemoryWarning()
    {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    override func rightBtnClick(button: UIButton) {
        let groupSettingVC : GroupSettingViewController = GroupSettingViewController()
        groupSettingVC.conversationModel = groupModel
        self.navigationController?.pushViewController(groupSettingVC, animated: true)
    }
    
}
extension TMTabbarController
{
    
    /// 创建tab
    func creatTab()
    {
        bgImageView.frame = CGRect(x: 0, y: kScreenH - 49, width: kScreenW, height: 49)
        bgImageView.backgroundColor = UIColor.black
        self.view.addSubview(bgImageView)
    }
    
    
    //MARK: 创建子控制器
    func creatChildViewControllers ()
    {
        for index  in 0...titleArray.count-1
        {
           
//           let aClass = getClassWitnClassName(vcArray[index]) as! UIViewController.Type
//           let vc:UIViewController = aClass.init()
//          let nav = TabNavgationVC.init(rootViewController: vc)
//          vc.tabBarItem.title = titleArray[index]
//          vc.tabBarItem.image = UIImage(named:imageNomalArray[index])
//          vc.tabBarItem.selectedImage = UIImage(named:imageSelectArray[index])
//          vc.title = titleArray[index]
//           addChildViewController(nav)
            
           
            var cuVC :UIViewController?
            
            
            switch index {
            case 0:
                
                let vc = SmallTalkVC(conversationType: (groupModel?.conversationType)!, targetId: groupModel?.targetId)
//                let nav = TabNavgationVC.init(rootViewController: vc!)
                          vc?.tabBarItem.title = titleArray[index]
                          vc?.tabBarItem.image = UIImage(named:imageNomalArray[index])
                          vc?.tabBarItem.selectedImage = UIImage(named:imageSelectArray[index])
                          vc?.title = titleArray[index]
                addChild(vc!)
                vc?.navigationController?.setNavigationBarHidden(true, animated: false)
//
                 cuVC = vc
//            case 1:
//                let vc = ThemeListVCViewController.init()
//                let nav = TabNavgationVC.init(rootViewController: vc)
//                vc.tabBarItem.title = titleArray[index]
//                vc.tabBarItem.image = UIImage(named:imageNomalArray[index])
//                vc.tabBarItem.selectedImage = UIImage(named:imageSelectArray[index])
//                vc.title = titleArray[index]
//                addChildViewController(nav)
//                cuVC = vc
//            case 2:
//                let vc = UIViewController.init()
//                let nav = TabNavgationVC.init(rootViewController: vc)
//                vc.tabBarItem.title = titleArray[index]
//                vc.tabBarItem.image = UIImage(named:imageNomalArray[index])
//                vc.tabBarItem.selectedImage = UIImage(named:imageSelectArray[index])
//                vc.title = titleArray[index]
//                addChildViewController(nav)
//                cuVC = vc
            case 1:
                let vc = TestVC.init()
                let nav = TabNavgationVC.init(rootViewController: vc)
                vc.tabBarItem.title = titleArray[index]
                vc.tabBarItem.image = UIImage(named:imageNomalArray[index])
                vc.tabBarItem.selectedImage = UIImage(named:imageSelectArray[index])
                vc.title = titleArray[index]
                addChild(nav)
                cuVC = vc
            default: break
                
            }
            
            
            
            let width :CGFloat = kScreenW/CGFloat(titleArray.count)
            let btn:TMTabbarButton = TMTabbarButton.init(frame:CGRect(x: width * CGFloat(index), y: 0, width: width, height: 49 ))
            btn.configWithItem((cuVC?.tabBarItem)!)
            btn.tag = index
            
            bgImageView.addSubview(btn)
            btn.addTarget(self, action: #selector(btnClick(_ :)), for: UIControl.Event.touchUpInside)
            if index == 0 {
                
                self.selectedIndex = 0
                btn.isSelected = true
                btn.backgroundColor = UIColor.blue
                currentBtn = btn;
            }
            
        }
    }
    
    @objc func btnClick(_ btn:TMTabbarButton)
    {
        if (currentBtn != nil)
        {
           currentBtn?.isSelected = false
           currentBtn?.backgroundColor = UIColor.black
        }
        btn.isSelected = true
        self.selectedIndex = btn.tag
        btn.backgroundColor = UIColor.blue
        currentBtn = btn
    
    }
    //获取工程的名字
    func getBundleName() -> String{
        var bundlePath = Bundle.main.bundlePath
        bundlePath = bundlePath.components(separatedBy: "/").last!
        bundlePath = bundlePath.components(separatedBy: ".").first!
        return bundlePath
    }
    //通过类名返回一个AnyClass
    func getClassWitnClassName(_ name:String) ->AnyClass?{
        let type = getBundleName() + "." + name
        return NSClassFromString(type)
    }
    
}
//
//  TMTabbarButton.swift
//  TMSwiftLearn
//
//  Created by harry on 17/2/7.
//  Copyright © 2017年 timer. All rights reserved.
//
import UIKit
class TMTabbarButton: UIButton {
   
    
   var item :UITabBarItem?
//   {
//    
//    
//    
//    didSet
//    {
//        item.addObserver(self, forKeyPath: "title", options: NSKeyValueObservingOptions(rawValue: 0), context: nil)
//        item.addObserver(self, forKeyPath: "image", options: NSKeyValueObservingOptions(rawValue: 0), context: nil)
//        item.addObserver(self, forKeyPath: "selectedImage", options: NSKeyValueObservingOptions(rawValue: 0), context: nil)
//        self.observeValue(forKeyPath: nil, of: nil, change: nil, context: nil)
//        
//    }
//    
//  }
//    
   override init(frame: CGRect)
   {
       super.init(frame: frame)
    imageView?.contentMode = UIView.ContentMode.center
       titleLabel?.textAlignment = NSTextAlignment.center
       titleLabel?.font = UIFont.systemFont(ofSize: 11)
       self.setTitleColor(UIColor.white, for: .normal)
       self.setTitleColor(UIColor.white, for: .selected)
    
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    deinit {
//         self.removeObserver(self, forKeyPath: "title", context: nil)
//        self.removeObserver(self, forKeyPath: "image", context: nil)
//        self.removeObserver(self, forKeyPath: "selectedImage", context: nil)
        
    }
    
    }
extension TMTabbarButton
{
    public func configWithItem(_ item :UITabBarItem)
    {
//        self.item = item;
//        self.item!.addObserver(self, forKeyPath: "title", options: NSKeyValueObservingOptions(rawValue: 0), context: nil)
//        self.item!.addObserver(self, forKeyPath: "image", options: NSKeyValueObservingOptions(rawValue: 0), context: nil)
//        self.item!.addObserver(self, forKeyPath: "selectedImage", options: NSKeyValueObservingOptions(rawValue: 0), context: nil)
//        self.observeValue(forKeyPath: nil, of: nil, change: nil, context: nil)
        
        self.setTitle(item.title, for: UIControl.State.normal)
        self.setTitle(item.title, for: UIControl.State.selected)
        
        self.setImage(item.image, for: UIControl.State.normal)
        self.setImage(item.selectedImage, for: UIControl.State.selected)
    }
    
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)
    {
        self.setTitle(item?.title, for: UIControl.State.normal)
        self.setTitle(item?.title, for: UIControl.State.selected)
        
        self.setImage(item?.image, for: UIControl.State.normal)
        self.setImage(item?.selectedImage, for: UIControl.State.selected)
    }
    
    override func imageRect(forContentRect contentRect: CGRect) -> CGRect {
        let imageW:CGFloat = contentRect.size.width;
        let imageH:CGFloat = contentRect.size.height;
        return CGRect(x: 0, y: -3, width: imageW, height: imageH)
    }
    
    override func titleRect(forContentRect contentRect: CGRect) -> CGRect {
        let titleY:CGFloat = contentRect.size.height * CGFloat(0.7)
        let imageW:CGFloat = contentRect.size.width;
        let imageH:CGFloat = contentRect.size.height-titleY;
        
        return CGRect(x: 0, y: titleY-2, width: imageW, height: imageH)
    }
    
   
}
//
//  TabNavgationVC.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/8.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class TabNavgationVC: UINavigationController {
    override func viewDidLoad() {
        super.viewDidLoad()
        
        
        
        
       let bar = UINavigationBar.appearance()
        bar.barTintColor = UIColor.black
        bar.tintColor = UIColor.white
        
        var attrs:[NSAttributedString.Key: AnyObject] = [:]
        
        attrs[NSAttributedString.Key(rawValue: NSAttributedString.Key.font.rawValue)] = UIFont.systemFont(ofSize: 17)
        attrs[NSAttributedString.Key(rawValue: NSAttributedString.Key.foregroundColor.rawValue)] = UIColor.white
        bar.titleTextAttributes = attrs
        
        
    }
    
    
   
    override func pushViewController(_ viewController: UIViewController, animated: Bool) {
        let backBtn :UIButton = UIButton.init(type: .custom)
        backBtn.frame = CGRect.init(x: 0, y: 0, width: 40, height: 30)
        backBtn.setTitle("返回", for: .normal)
        backBtn.addTarget(self, action: #selector(btnClick), for: .touchUpInside)
        let barItem :UIBarButtonItem = UIBarButtonItem.init(customView: backBtn)
        viewController.navigationItem.leftBarButtonItem = barItem
        super.pushViewController(viewController, animated: true)
    }
    
    
    @objc func btnClick()
    {
        if self.children.count>1 {
            self.popViewController(animated: true)
        }
        else
        {
            let nav = self.tabBarController?.navigationController
            nav?.popViewController(animated: true)
            
        }
        
        
    }
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    /*
    // MARK: - Navigation
    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */
}
//
//  BaseViewController.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/2/28.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class BaseViewController: UIViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        //修改导航栏背景色
        self.navigationController?.navigationBar.barTintColor = UIColor.hexString(hexString: "333333")
        //修改导航栏按钮颜色
        self.navigationController?.navigationBar.tintColor = UIColor.white
        //修改导航栏文字颜色
        self.navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]
        // Do any additional setup after loading the view.
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    //通过类名返回一个AnyClass
    func getClassWitnClassName(_ name:String) ->AnyClass?{
        let type = getBundleName() + "." + name
        return NSClassFromString(type)
    }
    
    //获取工程的名字
    func getBundleName() -> String{
        var bundlePath = Bundle.main.bundlePath
        bundlePath = bundlePath.components(separatedBy: "/").last!
        bundlePath = bundlePath.components(separatedBy: ".").first!
        return bundlePath
    }
    /*
    // MARK: - Navigation
    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */
}
//
//  BaseSearchView.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/10.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
import Realm
let itemWidth:CGFloat = 35
let itemSpace:CGFloat = 10
protocol BaseSearchViewDelegate {
    
    /// 删除展示项目的代理
    ///
    /// - Parameter item: 删除的对象
    func searchDeleteItem(item:RLMObject)
    
    
    
    /// 搜索框的值发生变化
    ///
    /// - Parameter nowText: 当前搜索框的值
    func searchBarTextChangedWith(nowText:String)
}
class BaseSearchView: UIView {
    
    var delegate:BaseSearchViewDelegate?
    
    @IBOutlet weak var searchView: UISearchBar!
    @IBOutlet weak var collectWidth: NSLayoutConstraint!
    @IBOutlet weak var collectionView: UICollectionView!
    
    var isShowCollectionView:Bool?
    
    
    var dataArray:Array<RLMObject>?
    
    override func awakeFromNib() {
        super.awakeFromNib()
        self.searchView.backgroundColor = UIColor.init(patternImage: UIImage.init(named: "backGray")!)
        self.searchView.setBackgroundImage(UIImage.init(named: "backGray")!, for: .any, barMetrics: .default)
        
//        searchView.inputAccessoryView?.backgroundColor = UIColor.groupTableViewBackground
        dataArray = Array.init()
        searchView.delegate = self
        
            }
    
    
    /// 配置数据
    ///
    /// - Parameter array: 要展示的数据
    public func configWithDataArray(array:Array<RLMObject>)
    {
        guard self.isShowCollectionView == true else {
            return
        }
        dataArray = array
        self.collectionView.backgroundColor = UIColor.init(patternImage: UIImage.init(named: "backGray")!)
        self.refreshLayout()
        self.collectionView .reloadData()
    }
    
    
    
}
extension BaseSearchView{
    
    
    /// 配置collectionView
   public func configCollectionViewWith(isShowCollect:Bool)
    {
        isShowCollectionView = isShowCollect
        guard isShowCollect == true else {
            return
        }
        self.collectWidth.constant = 0.1
        self.collectionView.delegate = self
        self.collectionView.dataSource = self
        
        self.collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: "cell")
        let layout:UICollectionViewFlowLayout = UICollectionViewFlowLayout.init()
        layout.sectionInset = UIEdgeInsets(top: 0, left: 5, bottom: 0, right: 5)
        layout.itemSize = CGSize.init(width: 30, height: 30)
        layout.scrollDirection = .horizontal;
        layout.minimumLineSpacing = itemSpace;
        //      layout.UICollectionViewDelegateFlowLayout = self
        self.collectionView.showsHorizontalScrollIndicator = false
        
        self.collectionView.setCollectionViewLayout(layout, animated: true)
    }
    
    
        
    
    
    /// 更新layout
    fileprivate func refreshLayout()
    {
        if self.dataArray?.count == 0 {
            self.collectWidth.constant = 0
        }
        else
        {
            if ((self.dataArray?.count)!*Int(itemSpace+itemWidth)+100) <= Int(kScreenW){
                self.collectWidth.constant = CGFloat((self.dataArray?.count)!*Int(itemSpace+itemWidth))
            }
            else
            {
               self.collectWidth.constant = kScreenW-100
            }
        }
    }
    
}
//MARK: - ---------------------collectionView代理----------------------
extension BaseSearchView:UICollectionViewDelegate,UICollectionViewDataSource,UICollectionViewDelegateFlowLayout
{
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return (dataArray?.count)!
    }
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath)
        
        let image = UIImageView.init(frame: CGRect.init(x: 0, y: 0, width: 30, height: 30))
        image.clipsToBounds = true
        image.layer.cornerRadius = 15
        let model = dataArray?[indexPath.row]
        if model is FriendsModel {
            let fModel  = model as! FriendsModel
            if !fModel.avater.isEmpty {
                
                image.sd_setImage(with: NSURL.init(string: fModel.avater) as URL?, placeholderImage: UIImage.init(named: "mine_avatar"))
            }
            else
            {
                image.image = UIImage.init(named: "mine_avatar")
            }
        }
        else if (model is GroupUserModel){
            let fModel  = model as! GroupUserModel
            if !fModel.avater.isEmpty {
                image.sd_setImage(with: NSURL.init(string: fModel.avater) as URL?, placeholderImage: UIImage.init(named: "mine_avatar"))
            }
            else
            {
                image.image = UIImage.init(named: "mine_avatar")
            }
        }
        
        cell.addSubview(image)
        
      
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize.init(width: itemWidth, height: itemWidth)
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)
    {
        guard indexPath.row<(self.dataArray?.count)! else {
            return
        }
        let item = self.dataArray?[indexPath.row]
        delegate?.searchDeleteItem(item: item!)
        self.dataArray?.remove(at: indexPath.row)
        self.refreshLayout()
        self.collectionView.reloadData()
        
    }
}
//MARK: - ---------------------搜索框代理方法----------------------
extension BaseSearchView:UISearchBarDelegate
{
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        
        delegate?.searchBarTextChangedWith(nowText: searchText)
    }
    
    
}
//
//  BaseCollectionView.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/10.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class BaseCollectionView: UIView {
    /*
    // Only override draw() if you perform custom drawing.
    // An empty implementation adversely affects performance during animation.
    override func draw(_ rect: CGRect) {
        // Drawing code
    }
    */
}
//
//  TestVC.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/10.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class TestVC: BaseTableVC {
    override func viewDidLoad() {
        super.viewDidLoad()
      
        self.configUIWith(fromCellName: "BaseTableCell", fromIsShowSearch: true,fromSearchType: true ,fromCellHeight: 50)
        
//        for i in 0...20
//        {
//            let model:BaseTableModel = BaseTableModel()
//            model.text = String(i)
//            model.id = String(i)
//            self.allDataArray?.append(model)
//        }
//        
//        self.setDataArray(dataArray: self.allDataArray!)
        
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
}
//
//  BaseTableCell.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/13.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
import Realm
protocol BaseCellDelegate {
    func cellRightBtnClick(model:RLMObject)
}
@objcMembers
class BaseTableCell: UITableViewCell {
    
    var delegate:BaseCellDelegate?
    
    @IBOutlet weak var imageLeftSpace: NSLayoutConstraint!
    @IBAction func BtnClick(_ sender: UIButton) {
        
        delegate?.cellRightBtnClick(model: self.model!)
    }
    @IBOutlet weak var rightBtnWidth: NSLayoutConstraint!
    @IBOutlet weak var rightBtn: UIButton!
    @IBOutlet weak var desLable: UILabel!
    @IBOutlet weak var iconImage: UIImageView!
    @IBOutlet weak var selectImage: UIImageView!
    
    var model:RLMObject?
    {
        didSet{
            
            if model is FriendsModel {
               let fModel  = model as! FriendsModel
               desLable.text = fModel.realname
               rightBtnWidth.constant = 60
               rightBtn.layer.borderWidth = 0.5
               rightBtn.layer.cornerRadius = 6
//                self.selectImage.isHidden = true
                if fModel.type == 1 {
                   rightBtn.layer.borderColor = UIColor.orange.cgColor
                   rightBtn.setTitleColor(UIColor.orange, for: .normal)
                   rightBtn.setTitle("互粉", for: .normal)
                }
                else if fModel.type == 2
                {
                    rightBtn.layer.borderColor = UIColor.green.cgColor
                    rightBtn.setTitleColor(UIColor.green, for: .normal)
                   rightBtn.setTitle("粉丝", for: .normal)
                }
            
                if !fModel.avater.isEmpty {
                   iconImage.sd_setImage(with: NSURL.init(string: fModel.avater) as URL?, placeholderImage: UIImage.init(named: "mine_avatar"))
                }
                else
                {
                     iconImage.image = UIImage.init(named: "mine_avatar")
                }
            }
            else if model is GroupUserModel{
                let fModel  = model as! GroupUserModel
                desLable.text = fModel.realname
                if !fModel.avater.isEmpty {
                    iconImage.sd_setImage(with: NSURL.init(string: fModel.avater) as URL?, placeholderImage: UIImage.init(named: "mine_avatar"))
                }
                else
                {
                    iconImage.image = UIImage.init(named: "mine_avatar")
                }
                rightBtn.isHidden = true
            }
            else if model is GroupModel {
//            group_name  user_num
                
                selectImage.isHidden = true
                self.imageLeftSpace.constant = -20
                self.rightBtn.setTitleColor(UIColor.white, for: .normal)
                self.rightBtn.backgroundColor = UIColor.hexString(hexString: "166AD9")
                
                
                let gModel = model as! GroupModel
                if !gModel.group_name.isEmpty {
                    
                let num = gModel.user_num.isEmpty ? "0" : gModel.user_num
                   desLable.text = String.init(format: "%@(%@)", gModel.group_name,num)
                }
               
               iconImage.image = UIImage.init(named: "mine_avatar")
            }
        }
    
    }
    
    
    
    override func awakeFromNib() {
        super.awakeFromNib()
//        self.contentView.backgroundColor = UIColor.groupTableViewBackground
        self.selectionStyle = .none
//        iconImage.backgroundColor = UIColor.red
        iconImage.layer.cornerRadius = iconImage.bounds.size.width/2
        iconImage.clipsToBounds = true
        
//        iconImage.image = UIImage.init(named: "mine_avatar")
        // Initialization code
    }
    override func setSelected(_ selected: Bool, animated: Bool) {
        super.setSelected(selected, animated: animated)
        // Configure the view for the selected state
    }
    
}
//
//  BaseTableVC.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/10.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
import Realm
class BaseTableVC: BaseViewController {
    var memberArray:Array<GroupUserModel>?
    
    var table:UITableView?
    
     var cellName:String?
    
     var modelName:String?
    
    //基础数据源
    var allDataArray:RLMResults<RLMObject>?
    
    //当前显示的数据源
    var dataArray:RLMResults<RLMObject>?
    
    
    
    //搜索结果数据源
     var searchArray:Array<RLMObject>?
    
    //是否显示搜索框
     var isShowSearch:Bool?
    
    //定义cell高度   没有做高度自动处理（目前看到的界面没有必要去做，后续添加）
    fileprivate var cellHeight:CGFloat?
    
    //选中结果集
     var selectedArray:Array<RLMObject>?
    
    
    var searchView:BaseSearchView?
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
         self.configUI()
        // Do any additional setup after loading the view.
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
}
//MARK: - ---------------------相关初始化----------------------
extension BaseTableVC{
    
   
   /// UI初始化
   fileprivate func configUI()
   {
    
    self.view.backgroundColor = UIColor.groupTableViewBackground
    
    selectedArray = Array()
    
    table = UITableView.init(frame: CGRect.init(x: 0, y: 64, width: kScreenW, height: kScreenH-64))
    table?.backgroundColor = UIColor.groupTableViewBackground
    self.view.addSubview(table!)
    table?.delegate = self;
    table?.dataSource = self;
    table?.tableFooterView = UIView.init()
    self.automaticallyAdjustsScrollViewInsets = false
    
   }
    
    
    
}
//MARK: - ---------------------TableDelegate AND DataSource----------------------
extension BaseTableVC:UITableViewDelegate,UITableViewDataSource
{
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if (cellHeight != nil) {
            return cellHeight!
        }
        else
        {
            return 44
        }
    }
    
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return dataArray != nil ?Int((dataArray?.count)!): 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
      
        var cell:UITableViewCell? = tableView.dequeueReusableCell(withIdentifier: "cell")
        if cell == nil
        {
           
            let path:String? = Bundle.main.path(forResource: cellName, ofType: "nib")
            if path == nil {
               let  aClass  = getClassWitnClassName(cellName!) as! UITableViewCell.Type
                cell = aClass.init(style: .default, reuseIdentifier: cellName)
            }
            else
            {
                cell = Bundle.main.loadNibNamed(cellName!, owner: self, options: nil)?.last as! UITableViewCell?
                
            }
        }
        
        let model:RLMObject = self.dataArray![UInt(indexPath.row)]
        cell?.setValue(model, forKey: "model")
        
        
        if cell is  BaseTableCell {
            let bCell = cell as! BaseTableCell
            bCell.delegate = self
            
            //MARK: - ---------------------一段垃圾代码  先这么写  要整个整理这个类----------------------
            if model is FriendsModel {
                
                bCell.rightBtn.isHidden = true
                if (self.selectedArray?.contains(where: { (m) -> Bool in
                    return (m as! FriendsModel).userid == (model as! FriendsModel).userid
                }))!{
                    
                    bCell.selectImage.image = UIImage.init(named: "logic_select")
//                    bCell.selectImage.backgroundColor = UIColor.green
                }
                else
                {
                    bCell.selectImage.image = UIImage.init(named: "logic_normal")
//                    bCell.selectImage.backgroundColor = UIColor.red
                }
                
                
                if (self.memberArray?.contains(where: { (m) -> Bool in
                    return m.userid == (model as!FriendsModel).userid
                }) == true) {
                     bCell.selectImage.image = UIImage.init(named: "logic_normal")
                }
                
            }
            else if (model is GroupUserModel){
            //删除群成员
                if (self.selectedArray?.contains(where: { (m) -> Bool in
                    return (m as! GroupUserModel).userid == (model as! GroupUserModel).userid
                }))!{
                    
                    
                    bCell.selectImage.image = UIImage.init(named: "logic_select")
                }
                else
                {
                    bCell.selectImage.image = UIImage.init(named: "logic_normal")
                }
                
                
                if (self.memberArray?.contains(where: { (m) -> Bool in
                    return m.userid == (model as!GroupUserModel).userid
                }) == true) {
//                    bCell.selectImage.backgroundColor = UIColor.yellow
                }
                
                
            }
            
            
        }
        
        
        
        
        
        return cell!
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
    {
        
        
    }
  
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        view.endEditing(true)
    }
}
//MARK: - ---------------------使用该类需要用到的方法----------------------
extension BaseTableVC
{
    
    /// 初始化配置
    ///
    /// - Parameters:
    ///   - fromCellName: cell 名称
    ///   - fromIsShowSearch: 是否有搜索框
    ///   - fromSearchType: 搜索框是否显示选择项目
    ///   - fromCellHeight: cell高度
    func configUIWith(fromCellName:String,fromIsShowSearch:Bool,fromSearchType:Bool,fromCellHeight:CGFloat)
    {
        self.cellName = fromCellName
        guard self.cellName != nil else {
            return
        }
        let path:String? = Bundle.main.path(forResource: cellName, ofType: "nib")
        
        
        if path == nil {
            
            self.table?.register(NSClassFromString(cellName!), forCellReuseIdentifier: cellName!)
        }
        else
        {
            self.table?.register(UINib.init(nibName: cellName!, bundle: Bundle.main), forCellReuseIdentifier: "cell")
        }
        
        self.cellHeight = fromCellHeight
        self.isShowSearch = fromIsShowSearch
        if self.isShowSearch! {
            searchArray = Array()
            searchView = Bundle.main.loadNibNamed("BaseSearchView", owner: self, options: nil)?.last as? BaseSearchView
            searchView?.frame = CGRect.init(x: 0, y: 64, width: kScreenW, height: 50)
            searchView?.configCollectionViewWith(isShowCollect: fromSearchType)
            searchView?.delegate = self
            self.view.addSubview(searchView!)
            
            self.table?.frame = CGRect.init(x: 0, y:50+64, width: kScreenW, height:kScreenH-64-50)
            
        }
        
        
        
        
    }
    
    
    
    
    /// 添加数据
    ///
    /// - Parameter dataArray: 要显示的数据
    func setDataArray(dataArray:RLMResults<RLMObject>)
    {
        self.allDataArray = dataArray
        self.dataArray = dataArray
        self.table?.reloadData()
    
    }
}
extension BaseTableVC:BaseSearchViewDelegate
{
    @objc func searchDeleteItem(item: RLMObject)
    {
    }
    func searchBarTextChangedWith(nowText:String)
    {
        
    }
    
    
    
//    //获取工程的名字
//    func getBundleName() -> String{
//        var bundlePath = Bundle.main.bundlePath
//        bundlePath = bundlePath.components(separatedBy: "/").last!
//        bundlePath = bundlePath.components(separatedBy: ".").first!
//        return bundlePath
//    }
//    //通过类名返回一个AnyClass
//    func getClassWitnClassName(_ name:String) ->AnyClass?{
//        let type = getBundleName() + "." + name
//        return NSClassFromString(type)
//    }
    
    
   
    
}
extension BaseTableVC:BaseCellDelegate{
    
    /// cell右边按钮点击
    ///
    /// - Parameter model: <#model description#>
    func cellRightBtnClick(model: RLMObject) {
        
    }
}
//
//  BaseTableModel.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/13.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class BaseTableModel: NSObject {
     var id:String?
    var text:String?
    var isSelect:Bool = false
}
//
//  BaseNavigationController.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/2.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class BaseNavigationController: UINavigationController {
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    /*
    // MARK: - Navigation
    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */
}
//
//  MyVoiceView.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/7.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
import AVFoundation
class MyVoiceView: UIView {
    var leftBtn : UIButton?
    var progressSlider:UISlider?
    var timeLable:UILabel?
    
    var player :AVAudioPlayer?
    
    override init(frame: CGRect) {
        super.init(frame: frame)
//        self .congigUI()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
   public func congigUIWithModel(_ model:RCVoiceMessage) {
       
        leftBtn = UIButton.init(type: .custom)
        leftBtn?.frame = CGRect.init(x: 0, y: 0, width: 40, height: 40)
        addSubview(leftBtn!)
        leftBtn?.addTarget(self, action: #selector(btnClick(_ :)), for: .touchUpInside)
        leftBtn?.setTitle("播放", for: .normal)
    
    
        progressSlider = UISlider.init(frame: CGRect.init(x:42, y: 19, width:self.frame.width-42*2 , height: 2))
        addSubview(progressSlider!)
        progressSlider?.addTarget(self, action: #selector(sliderChange(_ :)), for: .valueChanged)
        timeLable = UILabel.init(frame: CGRect.init(x: self.frame.width-42, y: 0, width: 40, height: 40))
        addSubview(timeLable!)
        timeLable?.text = String(model.duration)
        player = try? AVAudioPlayer.init(data: model.wavAudioData)
    }
    
    @objc func btnClick(_ btn:UIButton)
    {
        if (player?.isPlaying)!
        {
            player?.pause()
            
            btn.setTitle("播放", for: .normal)
        }
        else
        {
            
         player?.play()
         btn.setTitle("暂停", for: .normal)
        }
    }
    
    @objc func sliderChange(_ slider:UISlider){
        player?.volume = slider.value;
    }
}
//
//  MyVoiceCell.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/7.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class MyVoiceCell: RCMessageCell {
    var textlable :RCAttributedLabel?
    var bubbleBackgroundView :UIImageView?
    
    override init!(frame: CGRect) {
        super.init(frame: frame)
        self.initialize()
    }
    
    func initialize() {
        bubbleBackgroundView = UIImageView.init(frame: CGRect.init())
        messageContentView.addSubview(bubbleBackgroundView!)
        
        textlable?.text = "123123123123123";
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    public static func getBubbleBackgroundViewSize(str:String) -> (CGSize)
    {
      return CGSize.init(width: 0, height: 0)
    }
    
    override func setDataModel(_ model: RCMessageModel!) {
        super.setDataModel(model)
        self.setAutoLayout()
    }
    
    func setAutoLayout(){
        let bubbleBackgroundViewSize:CGSize = CGSize.init(width: 300, height: 44)
        var messageContentViewRect:CGRect = self.messageContentView.frame
         messageContentViewRect.size.width = bubbleBackgroundViewSize.width;
        
        if .MessageDirection_RECEIVE == self.messageDirection {
            self.messageContentView.frame = messageContentViewRect;
            self.bubbleBackgroundView?.frame = CGRect.init(x: 0, y: 0, width: bubbleBackgroundViewSize.width, height: bubbleBackgroundViewSize.height)
            
            let image:UIImage = RCKitUtility.imageNamed("chat_from_bg_normal", ofBundle: "RongCloud.bundle")
            
            self.bubbleBackgroundView?.image = image.resizableImage(withCapInsets: UIEdgeInsets(top: image.size.height * 0.8, left: image.size.height * 0.8, bottom: image.size.height * 0.2, right: image.size.height * 0.2))
        }
        else
        {
            messageContentViewRect.size.width = bubbleBackgroundViewSize.width;
            messageContentViewRect.size.height = bubbleBackgroundViewSize.height;
            messageContentViewRect.origin.x =
                self.baseContentView.bounds.size.width -
                (messageContentViewRect.size.width + 6 +
                    RCIM.shared().globalMessagePortraitSize.width + 10);
            self.messageContentView.frame = messageContentViewRect;
            
            self.bubbleBackgroundView?.frame = CGRect.init(x: 0, y: 0, width: bubbleBackgroundViewSize.width, height: bubbleBackgroundViewSize.height)
            
            let image:UIImage = RCKitUtility.imageNamed("chat_to_bg_normal", ofBundle: "RongCloud.bundle")
            
            self.bubbleBackgroundView?.image = image.resizableImage(withCapInsets: UIEdgeInsets(top: image.size.height * 0.8, left: image.size.height * 0.2, bottom: image.size.height * 0.2, right: image.size.height * 0.8))
        }
       
        let voiceModel:RCVoiceMessage = model.content as! RCVoiceMessage
        
        let myView = MyVoiceView.init(frame: CGRect.init(x: 0, y: 0, width: messageContentView.frame.width, height: 44))
        messageContentView.addSubview(myView)
        myView .congigUIWithModel(voiceModel)
        
    }
}
//
//  MyConversationViewController.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/6.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class MyConversationViewController: RCConversationViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        
//       语音消息  暂时还没有确定具体样式 self.conversationMessageCollectionView .register(MyVoiceCell.self, forCellWithReuseIdentifier: "voice")
        
        
        
        
        self.conversationMessageCollectionView .register(MyVoiceCell.self, forCellWithReuseIdentifier: "voice")
//        self.chatSessionInputBarControl.delegate = self
        
        // 监听键盘弹出通知
            NotificationCenter.default.addObserver(self, selector: #selector(clickshow), name:UIResponder.keyboardWillShowNotification,object: nil)
        // 监听键盘隐藏通知
            NotificationCenter.default.addObserver(self,selector: #selector(click),name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
   @objc func click(notification: NSNotification)
   {
    if self.chatSessionInputBarControl.frame.origin.y>kScreenH-49{
      self.view.frame = CGRect.init(x: 0, y: 0, width:kScreenW, height: kScreenH)
    }
    else
    {
     self.view.frame = CGRect.init(x: 0, y: -49, width:kScreenW, height: kScreenH)
    }
   }
    
    @objc func clickshow(notification: NSNotification)
    {
        self.view.frame = CGRect.init(x: 0, y: 0, width:kScreenW, height: kScreenH)
    }
    
    
    
    override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
    }
    
//    override func pluginBoardView(_ pluginBoardView: RCPluginBoardView!, clickedItemWithTag tag: Int) {
//        
//    }
    override func viewDidAppear(_ animated: Bool) {
        self.view.frame = CGRect.init(x: 0, y: -49, width:kScreenW, height: kScreenH)
        self.view.backgroundColor = UIColor.white
        self.conversationMessageCollectionView.frame = CGRect.init(x: 0, y: 49, width: kScreenW, height: kScreenH-64-49-50)
        self.scrollToBottom(animated: false)
//        make!.top.mas_equalTo()(view)
//        make!.bottom.mas_equalTo()(view)!.mas_offset()(-50)
//        }
//        
//        self.chatSessionInputBarControl.mas_makeConstraints { (make) in
////            make!.top.mas_equalTo()(view)
//            make!.height.mas_equalTo()(50)
//            make!.bottom.mas_equalTo()(view)!.mas_offset()(0)
//        }
    }
//    override func viewWillAppear(_ animated: Bool) {
//        super.viewWillAppear(true)
//        self.conversationMessageCollectionView .frame = CGRect.init(x: 0, y: 64, width:kScreenW, height: kScreenH-50-49-64)
//        self.scrollToBottom(animated: false)
//        self.chatSessionInputBarControl.frame = CGRect.init(x: 0, y: kScreenH-50-49, width:kScreenW, height: 50)
//    }
    
//    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
//        
//        
//        let model:RCMessageModel = self.conversationDataRepository[indexPath.row] as! RCMessageModel
//        if model.objectName == "RC:VcMsg"
//        {
//            let cell:MyVoiceCell = collectionView.dequeueReusableCell(withReuseIdentifier: "voice", for: indexPath) as! MyVoiceCell
//            cell.setDataModel(model)
//            return  cell as UICollectionViewCell
//        }
//        else
//        {
//            return super.collectionView(collectionView, cellForItemAt: indexPath)
//        }
//    }
    
//    override func didLongTouchMessageCell(_ model: RCMessageModel!, in view: UIView!) {
//        
//      }
    
    
}
//extension MyConversationViewController:RCChatSessionInputBarControlDelegate
//{
//    func present(_ viewController: UIViewController!, functionTag: Int) {
//        
//    }
//}
//
//  UIConstant.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/2.
//  Copyright © 2017年 柴进. All rights reserved.
//
import Foundation
// 屏幕宽高
let SCREEN_WIDTH : CGFloat = UIScreen.main.bounds.width
let SCREEN_HEIGHT : CGFloat = UIScreen.main.bounds.height
let NAV_HEIGHT : CGFloat = 64.0                  //导航栏高度
let kNavBackWidth : CGFloat = 30.0               //返回按钮高度
let kNavBackHeight : CGFloat = 30.0               //返回按钮高度
// 字体
let FONT_10 : UIFont = UIFont.systemFont(ofSize: 10)
let FONT_11 : UIFont = UIFont.systemFont(ofSize: 11)
let FONT_12 : UIFont = UIFont.systemFont(ofSize: 12)
let FONT_14 : UIFont = UIFont.systemFont(ofSize: 14)
let FONT_16 : UIFont = UIFont.systemFont(ofSize: 16)
let FONT_18 : UIFont = UIFont.systemFont(ofSize: 18)
// tableView分割线颜色
let separateLine_Color : UIColor = UIColor.hexString(hexString:"D1D1D1")
// 间距
//MARK: - GroupListCell
let LEFT_PADDING : CGFloat = 10.0
//MARK: - GroupSettingWithArrowCell AND GroupSettingWithSwitchCell
let LEFT_PADDING_GS : CGFloat = 15.0
//MARK: - GroupNameEditTextField
let inputTF_height : CGFloat = 40.0
//MARK: - ApplyJoinGroupTextView
let inputTV_height_MIN : CGFloat = 40.0
let inputTV_height_MAX : CGFloat = 120.0
//MARK: - ComboboxView
let TOP_PADDING : CGFloat = 3.0
let oneRow_height : CGFloat = 44.0
//
//  GroupPluginSwift.swift
//  GroupChatPlungSwiftPro
//
//  Created by 柴进 on 2017/3/24.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class GroupPluginSwift: NSObject {
    @objc class func initWithToken(token:String , next:@escaping ()->()) {
        
        RCIM.shared().initWithAppKey("qf3d5gbjqpxeh")
        
        UserRequest.getToken(params: ["app_token":token], hadToast: true, fail: { (error) in
            print(error)
        }) { (dis) in
            print(dis)
            
            if let code = dis["code"] {
                if "\(code)" != "1" {
                   print("\(dis["msg"] ?? ""):\(code)")
                   return
                }
            }
           
            sharePublicDataSingle.publicData.userid = dis["userid"] as! String
            sharePublicDataSingle.publicData.avater = dis["avater"] as! String
            sharePublicDataSingle.publicData.corpid = dis["corpid"] is NSNumber ? (dis["corpid"] as! NSNumber).stringValue : dis["corpid"] as! String
            sharePublicDataSingle.publicData.realname = dis["realname"] as! String
            sharePublicDataSingle.publicData.access_token = dis["access_token"] as! String
            sharePublicDataSingle.publicData.im_token = dis["im_token"] as! String
            sharePublicDataSingle.token = token as NSString
            DataBaseOperation.initDataBase()
            
            UserRequest.initData(params: ["app_token":token,"updatetime":"0"], hadToast: true, fail: { (error) in
//                print(error)
            }, success: { (dic) in
                print(dic)
                RCIM.shared().connect(withToken: sharePublicDataSingle.publicData.im_token, success: { (userId) in
                    print("登陆成功。当前登录的用户ID：\(String(describing: userId))")
                    next()
                }, error: { (status) in
                    print("登陆的错误码为:\(status)")
                }) {
                    print("token错误")
                }
            })
//            UserRequest.friends(params: ["app_token":token], hadToast: true, fail: { (error) in
//                print(error)
//            }, success: { (dic) in
//                print(dic)
//            })
        }
    }
    
   @objc class func logout(){
        RCIM.shared().logout()
    }
}
//
//  PublicDataSingle.swift
//  GroupChatPlungSwiftPro
//
//  Created by 柴进 on 2017/3/15.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
let sharePublicDataSingle = PublicDataSingle()
struct PublicData {
    // structure definition goes here
    var avater = "" //头像地址
    var userid = "" //用户id
    var corpid = "" //公司id
    var realname = "" //真实姓名
    var access_token = "" //accToken
    var im_token = "" //imToken
}
class PublicDataSingle: NSObject {
//    static let sharePublicDataSingle = PublicDataSingle()
    var publicData = PublicData()
    var userId:NSString = ""//用户id
//    var token:NSString = "MDAwMDAwMDAwMJ6tsN_IYpqci3l8Yb20f5uZ3Hyhj3ivm6_LlpmG2oCkgqK837-Iq6uKiWedrculzpnQmqKNaLjRyZSFpZuTo6aSh5vPx2KRn311gJnHqXjLlZWIZn6f1c6ztXTbgcqumpOLl83Gh9ifgJt_mrCkgNiWlZahl56vm6_LfJiHpICkgqKw0b6H2auKiWedrculzoyrh2KPn6_cvqmIlJLLfZmRfLuWs3Snn3qbrZrGuG_OlbqqnX6f1c6ztXTbhsuIYYeIs5a0dKaffXWAqr64msuYqp6lj4ivm6_LdM2EpIGqk4vKy8aIop-Am3-asKSA2I27gGGNZ97bwJOf2ZCUiaGbi7vOtJmqrn92nWaytYeags13Yn6e3c7IqHnenKdwpJtmytXHnJqmlHV_Z63Le5eDp4Opgp-_lbTLfM2EpIFinHu4zcl3t5yVeaKlvrR_m33Nd2GEec3dtaWW3IXbopqFd7DNyZ2nZouKf5qzyn_dfcypmphouM3KqYnegcummoaHr9iunrewi4qAob6kf5t9zZVmg66v2K_Om9CRuIiaiJ2wyLFht62TeW-ZvqmEyICVY52XjLDRyc2q2pyohaiRZqyXvoizopSeraext63bgbmpp4Ofv5W-pGvNhKSBoZxln9y-iK-wepylmrG0f9h90J6mmaLSlcC3bM6ak4mdgp7W2smH2al9dYClvqWMy5W6Z2OWjbjRvpOB2pKojJqIoZuWx3fYqXqfhGLHlIjblrZ7Z36er9ivzp_ekJOJnZt3r5uumqKffXWAmb2UiNWY0Hhhj4ivm6_LeM2EpIGkm2bK1cecmqqTZIChxqiLzoPMe6mCeaeXtKWElYXbjGWGh6_Yrp3ZrItkoqa8k4zZjbqepH6f1c7LzpvVkJSJnZxnuKbIYs2rioVrm8aTZs6Apnyalo2wlceohcydtIBngqGblsd32KqToIykxqRn2n3MqZqPZ7zawKiJ3YHLppqCnd3Ov2O3pot5i5qzyn_dfcypmo5nn9nJqHnZmbiNq4Ke1seunNlnf3mLqr23rpaCqoiajovelrTbfJSHpIGVhXewzb5ir6KUZYSXyKhv1466ZpqEnrCzuKZ5l4y2iXOdZJeqtojFhISckGHHkabOhpWZZIhnwNO5z4XKj8yvgYaLl8-zm6etk6CimsalgNWY3YB_j4m41Lq1fa2dtYWhmmbK3bh2rrB_rHyhxZR3l4qqZquajMCXyc6ryp3OcIKNobOXupmSrH9lpp7Ika7Yg7d8koevuM25y32oms-Jio1n0tyyYNGtf3mupMW2pd-Hqqp7loyX2LS3l9CbqG9jjIuWmb1gzah-nniAxaaquYXPnpKYit7YtbaXlZq5iXWdi7_fvoezl5SdqanFtaKahZaikoKM0tm0qHnVmpOamoV3sM_HY6utkomHmrPLeJ6ApnyrmGefy8e4hM2HyoBkiIjJzrFzq2eUZIyqxbiHzoPMe2ODn7fOsqR9lZuTjaqboazZv4OqbHqgpqDFzW-VjruAYYZ9tNXIznjZkZNwpYKd3c6-Y7eviWRnnca4gNGXz2thmo2o0a_LotuEpIGkm2bK1cecmqCTZYCoxbiHzoPNc6R-orSWyc1szpqUgaiai7fOtJqiqXqfhKfHz3jVjqZ7Z36fp86ypH2UmbhonYKe1d2zdMhrf4aLqLLLoZaApnydmn2o1cnOiM2Hy3xihni73bJ0qmiAhoukrc-AzZbQhKeXiK-br86BxZy5kaCeiM6btmHFaYB5rn62lKHOgKZ8q5aMytqvy6LNhqV8qIiIr5m-nbqufnmDY7LOg92B0Iidgnyv3LSlfN6Fzomchoirlr6Htp-Xg3Nu"//用户token
    var token:NSString = "MDAwMDAwMDAwMJ6tsN_IYpqci3l8Yb20f5uZ3Hyhj3ivm6_LiNuGpZqahXewlshit6-Tn3ylvrR_m33RgGKYfLzevpOX3JqlfKiKfLTVx52mq4pkb6Wtyq3Ojbt0qI1n2tHLtHyagct4moV3sNHHh6emk3V_Z63PhJaXqoiqjWfK3cileNuJqYWhm6Gr2r5imqp6m62axqhv05W6ZpqEnq_cr8qqzZvOjZmbe5vNx4e2n4CbgJTItaGZgpWIlJmJvNG1pY3HnLWiY4h4wMjJhLuhf3mAlMi1ns6Op4hhjmioyMq1jN6RtY2UnYi737-Erp99dYClxpOA1Zaqh5qEnq_ds9uM3IW1hKqHns3espmqqXqggJ2-km-VlbpjnX6f1c6ztYSYhaWEZoZ4u5iyqaqpeqCAnb6Sb9WXpntnfp-rl7WlhNyFy5Crhp6vzrFzq6mKioRhvJOu246VnqaNaLjVyLiIzYfKgKiCnd3Ox3ensJV4b6TGk5rVls9roZh4r5uvy3TNhKSBYpx7uM3Jd7eclXmipb60f5t9zXdhhHmn37W1dJWG24SahXewzcmdp2aLin-as85rlpaqqaR-o7SVv7mFlZvagGeCnqvOsXOrZ5RkjKrFuIfOg8x7YoJ5t5ivyqrNmaiNmZN3r5vHnrepk3WtmsW5hMuXqnirmK6vm6_LeM2EpIGhm6LA1cl3t5yKZG-cvrR_m33Me6R-opfQtLds1JrPkaGde7zLvmKaoYuFf2etzoeVgbqDZY5nt5q1qIzbhaiAqoZ4uNG0hMitfnahZrOojM-OzZlhgp_K0a_Kqs2RlI2rnXuf2a6a0J96m62axbmEy46qiKR-n9XOs6R814HOfZude9KXvoizonqcpZqxtH_YfdCqp49n0tq-k2Takc6jpJOHr5uumqawf5x7qbHbf5eDp3uqfp7dzsiobNKZuGyXk4uXzcaH2J-Am4CryLl40ZfPa5-YjN3ds6Z13pm4bJmFobTbx4OqqXqfgKHHz4jUjqp4Zn6f1trKuKvXhKSBn5OLm9C_iKqfgJ9rYsaordh90JZiloy40a_Los2FtICkgqG028eIo56Tn6Kdx9p_m4vcfJSZibjRs855x5y1iZ2SoazIyYTEr392nZq8tK3OjbqAm4-NtN--lIXamZONpoKe1c65hbN4lWJndrW5mrOGqHhkiYrVl8qpga-RzJugh2Ta0r9g0WaJY6KqtpOu1IK6mWaaoNrZv7ij2JK4kKucZpfbx5rIqoKgoWO9uHzUltCIY4Kg2ZfAqaPNiZGnkotmvMbKeK5ngHZ3YbLLmtGCu3h3l6Osy8CpfJibuX1nkKLRlsZ20K-KZG-SyMxrmYKqh6qXn7ipv86XsJzMo2KQe9a4x3TIa5SfamLFtmbfjqd8Z5h8m77AuGTNmamFpZCKytTJdZZohHmZY8e5eNGXuIB7l2e0zbSonpiGzIlnkHu41MZ1yauGn2equqiA2ZeqY3iCn8C0ybR814HOhaecoqjVv3OqbH56ZqStz4TflpRroY94r5uvy4jbhqWamoV3sJbIYrevkomHmrPKf5iCt3Oofp7dzsq5gdCbzmyZm4u7zrSZq7CVinidx81v05e6qamCeqjfx7hozITOhaebh6_Yrp2vZ5Seb6W-uGfOjrt8l5l90tzAtHyahaSumpt7n9PGh5acimRvqseootB9zaGogXiwz8q5fcqRk3CqnHvS0K6a0K19dYCbxpSA3JW6g5qEnq_er8qqzZyoo6WTh6-bsoSyaoCGoWSzpaGVgaapmo-NztzHuX3QgcumqYeIp5azhK6tgIaHqLCkgN6Numecl2eWzrXKfa2NtZudm6HAvrSEzZCFeJ55vpOIvn3MqZqYZ9LTyMp8moHOhZySobeYs6q2sIqckJmyuIeVgt2em495s5m0pZaVh7WNnJN7s5q-h65peqBmbg"//用户token
    
//    func getToken(uerToken:NSString) {
//        UserRequest.getToken(params: ["appToken":sharePublicDataSingle.token], hadToast: true, fail: { (error) in
//            print(error)
//        }) { (dis) in
//            print(dis)
//            self.publicData.userid = dis["userid"] as! String
//            self.publicData.avater = dis["avater"] as! String
//            self.publicData.corpid = dis["corpid"] is NSNumber ? (dis["corpid"] as! NSNumber).stringValue : dis["corpid"] as! String
//            self.publicData.realname = dis["realname"] as! String
//            self.publicData.access_token = dis["access_token"] as! String
//            self.publicData.im_token = dis["im_token"] as! String
//        }
//    }
}
//
//  UIColor+Extension.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/2.
//  Copyright © 2017年 柴进. All rights reserved.
//
import Foundation
extension UIColor {
    
    static func hexString (hexString: String) -> UIColor {
        // 默认颜色
        let DEFAULT_VOID_COLOR : UIColor = UIColor.white
        
        
        var cString = hexString.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).uppercased()
        if cString.count < 6 {
            return DEFAULT_VOID_COLOR
        }
        
        if cString.hasPrefix("0x") {
            cString = (cString as NSString).substring(from: 2)
        } else if cString.hasPrefix("#") {
            cString = (cString as NSString).substring(from: 1)
        }
        
        if cString.count != 6 {
            return DEFAULT_VOID_COLOR
        }
        
        var range : NSRange = NSRange(location: 0, length: 2)
        let rString = (cString as NSString).substring(with: range)
        
        range.location = 2
        let gString = (cString as NSString).substring(with: range)
        
        range.location = 4
        let bString = (cString as NSString).substring(with: range)
        
        var r:CUnsignedInt = 0, g:CUnsignedInt = 0, b:CUnsignedInt = 0;
        Scanner(string: rString).scanHexInt32(&r)
        Scanner(string: gString).scanHexInt32(&g)
        Scanner(string: bString).scanHexInt32(&b)
        
        return UIColor(red: CGFloat(r) / 255.0, green: CGFloat(g) / 255.0, blue: CGFloat(b) / 255.0, alpha: CGFloat(1))
    }
}
//
//  UIViewController+Extension.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/15.
//  Copyright © 2017年 柴进. All rights reserved.
//
import Foundation
extension UIViewController {
     /// 设置导航栏右侧按钮
     ///
     /// - Parameter items: 导航栏右侧按钮按从右往左的顺序,文字按钮直接传string类型,图片按钮需要传入UIImage类型
     func setRightBtnWithArray<T>(items:[T]){
    
        var itemArr = [UIBarButtonItem]()
        for i in 0..<items.count {
            
            let btn = UIButton.init()
            btn.tag = 1000 + i
            let item = items[i]
            if item is String {
                btn.titleLabel?.font = FONT_16
                btn.setTitle(item as? String, for: .normal)
            }
            if item is UIImage {
                btn.setImage(item as? UIImage, for: .normal)
            }
            btn.sizeToFit()
            btn.addTarget(self, action: #selector(rightBtnClick), for: .touchUpInside)
            let barButtonItem = UIBarButtonItem.init(customView: btn)
            itemArr.append(barButtonItem)
        }
        self.navigationItem.rightBarButtonItems = itemArr
    }
    /// 导航栏右侧按钮点击事件,在需要监听方法的控制器中重写这个方法
    ///
     // - Parameter button: 通过按钮的tag值判断点击的是哪一个,tag值从1000开始
    @objc func rightBtnClick(button:UIButton) {
        
    }
    
    
    func showAlert(content:String) {
       let alert = UIAlertController(title: "提示", message: content, preferredStyle: .alert)
        self.present(alert, animated: true, completion: nil)
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 3) {
            self.presentedViewController?.dismiss(animated: true, completion: nil)
        }
    }
    
}
//
//  String+Extension.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/15.
//  Copyright © 2017年 柴进. All rights reserved.
//
import Foundation
extension String {
    
    ///   NSRange 转 Range<String.Index>
    ///
    /// - Parameter nsRange: <#nsRange description#>
    /// - Returns: <#return value description#>
    func changeToRange(from nsRange: NSRange) -> Range<String.Index>? {
        guard
            let from16 = utf16.index(utf16.startIndex, offsetBy: nsRange.location, limitedBy: utf16.endIndex),
            let to16 = utf16.index(from16, offsetBy: nsRange.length, limitedBy: utf16.endIndex),
            let from = from16.samePosition(in: self),
            let to = to16.samePosition(in: self)
            else { return nil }
        return from ..< to
    }
    
    /// Range<String.Index> 转 NSRange
    ///
    /// - Parameter range: <#range description#>
    /// - Returns: <#return value description#>
    func nsRange(from range: Range<String.Index>) -> NSRange {
        let utf16view = self.utf16
            if let from = range.lowerBound.samePosition(in: utf16view), let to = range.upperBound.samePosition(in: utf16view) {
               return NSMakeRange(utf16view.distance(from: utf16view.startIndex, to: from), utf16view.distance(from: from, to: to))
            }
            return NSRange.init()
        //        let from = range.lowerBound.samePosition(in: utf16)
        //        let to = range.upperBound.samePosition(in: utf16)
        //
        //        return NSRange(location: utf16.distance(from: utf16.startIndex, to: from!),
        //                       length: utf16.distance(from: from!, to: to!))
    }
    
    func getTextHeight(font:UIFont,width:CGFloat) -> CGFloat {
        
        let constraintRect = CGSize(width: width, height: CGFloat.greatestFiniteMagnitude)
        let boundingBox = self.boundingRect(with: constraintRect, options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: [NSAttributedString.Key.font: font], context: nil)
        return boundingBox.height
    }
    
    static func changeToString(inValue:Any) -> String {
        var str = ""
        if inValue is NSNumber {
            str = (inValue as! NSNumber).stringValue
        }else if inValue is String{
            str = inValue as! String
        }else if inValue is Float || inValue is Int{
            str = "\(inValue)"
        }
        
        return str
    }
    
}
//
//  NSDate+Extension.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/2.
//  Copyright © 2017年 柴进. All rights reserved.
//
import Foundation
extension Date {
    // 判断是否是今天
    static func isToday (target : Date) -> Bool {
        let currentDate : Date = Date()
        let dateFormatter : DateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let currentResult : String = dateFormatter.string(from: currentDate)
        let targetResult : String = dateFormatter.string(from: target)
        
        return currentResult == targetResult
    }
    
    // 判断是否是昨天
    static func isLastDay (target : Date) -> Bool {
        let currentDate : Date = Date()
        let dateFormatter : DateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let currentResult : String = dateFormatter.string(from: currentDate)
        let targetResult : String = dateFormatter.string(from: target)
    
        let currentD = dateFormatter.date(from: currentResult)
        let targetD = dateFormatter.date(from: targetResult)
        return currentD?.timeIntervalSince(targetD!) == 24 * 60 * 60
    }
    
    // 判断是否是一周内
    static func isOneWeek (target : Date) -> Bool {
        let currentDate : Date = Date()
        let dateFormatter : DateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let currentResult : String = dateFormatter.string(from: currentDate)
        let targetResult : String = dateFormatter.string(from: target)
        
        let currentD = dateFormatter.date(from: currentResult)
        let targetD = dateFormatter.date(from: targetResult)
        
        return currentD?.timeIntervalSince(targetD!) == 7 * 24 * 60 * 60
    }
    // 日期格式转换yy/MM/dd
    static func formattDay (target : Date) -> String {
        
        let dateFormatter : DateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yy/M/d"
        let targetResult : String = dateFormatter.string(from: target)
        
        return targetResult
    }
    
    // 根据日期获取时间戳
    static func getTimestamp (dateString : String) -> TimeInterval {
        if dateString.count <= 0 {
            return 0
        }
        let newDateStirng = dateString.appending(" 00:00:00")
        
        let formatter : DateFormatter = DateFormatter()
        formatter.dateStyle = DateFormatter.Style.medium
        formatter.dateStyle = DateFormatter.Style.short
        formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
        formatter.timeZone = TimeZone(identifier: "Asia/Beijing")
        
        let dateNow = formatter.date(from: newDateStirng)
        
        return (dateNow?.timeIntervalSince1970)!
    }
    
    // 获取星期
    static func weekWithDateString (target : Date) -> String{
        let dateFormatter : DateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        let targetResult : String = dateFormatter.string(from: target)
        let timestamp = Date.getTimestamp(dateString: targetResult)
        let day = Int(timestamp/86400)
        let array : Array = ["星期一","星期二","星期三","星期四","星期五","星期六","星期日"];
        return array[(day-3)%7]
        //        return "星期\((day-3)%7))"
    }
    
}
//
//  DataBaseOperation.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/1.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
import Realm
class DataBaseOperation: NSObject
{
    
    
    
    /// 数据库的初始化
    public static func initDataBase()
    {
        
        let  config:RLMRealmConfiguration  = RLMRealmConfiguration.default()
        /// todo  暂时写死  最后需要换成用户相关的唯一标识字段
        let username:String = sharePublicDataSingle.publicData.userid + sharePublicDataSingle.publicData.corpid
        config.fileURL =  config.fileURL?.deletingLastPathComponent().appendingPathComponent(username).appendingPathExtension("realm")
        print(config.fileURL!)
        //数据库迁移
        self.performingMigrationWithConfig(config: config)
        RLMRealmConfiguration.setDefault(config)
        
    }
    
    
    
    /// 清空本地数据库数据
    public static func removeAllData()
    {
        let realm:RLMRealm = RLMRealm.default()
        realm.beginWriteTransaction()
        realm.deleteAllObjects()
        try? realm.commitWriteTransaction()
        
    }
    
    
    
    /// 修改或添加一条数据
    ///
    /// - Parameter rlmObject: 需要修改或添加的数据
    public static func addData(rlmObject:RLMObject)
    {
        let realm = RLMRealm.default()
        realm.beginWriteTransaction()
        realm.addOrUpdate(rlmObject)
        try? realm.commitWriteTransaction()
        
    }
    
    
    /// 批量添加或修改数据
    ///
    /// - Parameters:
    ///   - rlmObjects: 需要添加或者修改的数据
    ///   - aClass: 数据库模型类型
    public static func addDataWithArray(rlmObjects:Array<Any>,aClass:AnyClass)
    {
        let realm = RLMRealm.default()
        realm.beginWriteTransaction()
        for any in rlmObjects {
            if any is Dictionary<String, Any>
            {
                aClass.createOrUpdateInDefaultRealm(withValue: any)
            }
        }
        try? realm.commitWriteTransaction()
    }
    
    
    
    /// 删除一条数据
    ///
    /// - Parameter rlmObject: 需要删除的数据
    public static func removeData(rlmObject:RLMObject?)
    {
        
        guard rlmObject != nil else {
            return
        }
        let realm = RLMRealm.default()
        realm.beginWriteTransaction()
        realm.delete(rlmObject!)
        try? realm.commitWriteTransaction()
        
    }
    
    
    /// 批量删除数据
    ///
    /// - Parameter rlmObjects: 需要删除的数据
    public static func removeDataWithArray(rlmObjects:Any?)
    {
        let realm = RLMRealm.default()
        realm.beginWriteTransaction()
        realm.deleteObjects(rlmObjects! as! NSFastEnumeration)
        try? realm.commitWriteTransaction()
    }
    
    
    
    //    public static func removeDataWithIdentifications(_ idents:Array<Any>,aClass: Swift.AnyClass)
    //    {
    //        let realm = RLMRealm.default()
    //        realm.beginWriteTransaction()
    //        for any in idents
    //        {
    //            if any is String {
    //                model:RLMObject = aClass.objectForPrimaryKey(any)
    //            }
    //        }
    //        try? realm.commitWriteTransaction()
    //
    //
    //    }
    
    
    
    /// 数据库迁移
    ///
    /// - Parameter config: config description
    private static func performingMigrationWithConfig(config:RLMRealmConfiguration)
    {
        config.schemaVersion = 1
        config.migrationBlock = { (migration:RLMMigration,oldSchemaVersion:UInt64)->Void in
            if oldSchemaVersion < 1 {
                
            }
        }
    }
    
}
//
//  DataOperation.swift
//  GroupChatPlungSwiftPro
//
//  Created by 柴进 on 2017/3/21.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class DataOperation: DataBaseOperation {
    class func saveInitData(success:@escaping (_ success:Dictionary<String, Any>) ->()) -> (Dictionary<String, Any>) ->() {
        func temp(dic:Dictionary<String, Any>) ->(){
            
            DataBaseOperation.addDataWithArray(rlmObjects: dic["groupList"] as! Array<Any>, aClass: GroupModel.self)
            
            DataBaseOperation.addDataWithArray(rlmObjects: dic["groupUserList"] as! Array<Any>, aClass: GroupUserModel.self)
//            DataBaseOperation.addDataWithArray(rlmObjects: dic["userList"] as! Array<Any>, aClass: FriendsModel.self)
            success(dic)
        }
        return temp
    }
    
    
    
    class func saveFriendsData(success:@escaping (_ success:Dictionary<String, Any>) ->()) -> (Dictionary<String, Any>) ->() {
        
        
        func temp(dic:Dictionary<String, Any>) ->(){
            
            print(dic)
            DataBaseOperation.addDataWithArray(rlmObjects: dic["list"] as! Array<Any>, aClass: FriendsModel.self)
            
        }
         return success
    }
    
    
    class func saveUserListData(success:@escaping (_ success:Dictionary<String, Any>) ->()) -> (Dictionary<String, Any>) ->() {
        
        
        func temp(dic:Dictionary<String, Any>) ->(){
            
            print(dic)
            DataBaseOperation.addDataWithArray(rlmObjects: dic["user_list"] as! Array<Any>, aClass: FriendsModel.self)
            
        }
         return success
    }
}
//
//  MessageModel.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/2.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class MessageModel: BaseRealMModel {
    
    //字段说明： 字段是照着融云的消息类型搬过来的字段  具体打开下边网址
    //http://www.rongcloud.cn/docs/api/ios/imlib/index.html
    //http://www.rongcloud.cn/docs/api/ios/imlib/Classes/RCMessage.html
    
    
      dynamic var conversationType = "" //会话类型
      dynamic var targetId = ""         //目标id
      dynamic var content = ""          //消息内容
      dynamic var messageId = ""      //消息id
      dynamic var messageDirection = "" //消息方向
      dynamic var senderUserId = ""    //发送者id
      dynamic var receivedStatus = ""   //消息的接收状态
      dynamic var sentStatus = ""         //发送状态
      dynamic var receivedTime = ""     //接收时间
      dynamic var objectName = ""      //消息类型名
      dynamic var extra = ""           //附加字段
      dynamic var  messageUId = ""     //全局唯一ID
      dynamic var readReceiptInfo = "" //阅读回执状态
      dynamic var imageUrl = ""       //
      dynamic var thumbnailImage = "" //缩略图
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
//      dynamic var readReceiptInfo = "" //阅读回执状态
    
}
//
//  BaseRealMModel.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/1.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
import Realm
class BaseRealMModel: RLMObject {
    
    override func value(forUndefinedKey key: String) -> Any? {
        print(key)
        return true
    }
}
//
//  GroupModel.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/1.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
//群组表
class GroupModel: BaseRealMModel {
    @objc dynamic var is_open = ""    // 是否开放（0:私有;1:公开）
    @objc dynamic var user_max = ""   // 用户上限
    @objc dynamic var group_name = "" // 群组名
    @objc dynamic var owner_id = ""   // 群主用户ID
    @objc dynamic var groupid = ""    // 群组ID
    @objc dynamic var user_num = ""   // 用户数
    @objc dynamic var qr_url = ""     // 二维码
    @objc dynamic var auth_code = ""  // 验证码
    @objc dynamic var corpid = ""
    @objc dynamic var inputtime = ""
    @objc dynamic var icon_url = ""
    @objc dynamic var is_delete = ""
    @objc dynamic var updatetime = ""
    
    override static func primaryKey()->String
    {
        return "groupid";
    }
    
    override func setValue(_ value: Any?, forUndefinedKey key: String) {
        
    }
}
//
//  MessageCenterModel.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/1.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class MessageCenterModel: BaseRealMModel {
}
//
//  UserListModel.swift
//  NewTcpApp
//
//  Created by xslp on 2020/8/5.
//  Copyright © 2020 xslpiOS. All rights reserved.
//
import UIKit
class UserListModel: BaseRealMModel {
    @objc dynamic var userid = ""    // 用户ID
    @objc dynamic var realname = "" // 昵称
    @objc dynamic var avater = "" // 头像
    @objc dynamic var im_userid = "" // im-id
    @objc dynamic var updatetime = "" // 更新时间
    @objc dynamic var is_delete = "" // 是否删除
    override static func primaryKey()->String?
    {
        return "userid";
    }
}
//
//  FriendsModel.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/3.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
//好友表
class FriendsModel: BaseRealMModel {
    
    @objc dynamic var userid = ""    // 用户ID
    @objc dynamic var realname = "" // 昵称
    @objc dynamic var avater = "" // 头像
    @objc dynamic var type:NSNumber = 0//1 互粉  2单粉我
    @objc dynamic var im_userid = "" // im-id
    @objc dynamic var updatetime = "" // 更新时间
    @objc dynamic var is_delete = "" // 是否删除
    override static func primaryKey() -> String?
    {
        return "userid";
    }
}
//
//  GroupUserModel.swift
//  GroupChatPlungSwiftPro
//
//  Created by 柴进 on 2017/3/21.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class GroupUserModel: BaseRealMModel {
    
    @objc dynamic var userid = ""    // 用户ID
    @objc dynamic var realname = "" // 昵称
    @objc dynamic var avater = "" // 头像
    @objc dynamic var groupid = "" // 所在组群id
    @objc dynamic var id = "" // id
    @objc dynamic var updatetime = "" // 更新时间
    @objc dynamic var is_delete = "" // 是否删除
    @objc dynamic var inputtime = "" // 插入时间
    @objc dynamic var join_type = "" // 插入时间
    override static func primaryKey()->String?
    {
        return "id";
    }
}
//
//  GroupSweepView.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/23.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class GroupSweepView: UIView {
  class func initWithImage(url:String)->(GroupSweepView)
    {
       let view = GroupSweepView.init(frame: CGRect.init(x: 0, y: 64, width: kScreenW, height: kScreenH-64))
       view.backgroundColor = UIColor.white
       let lable = UILabel.init(frame: CGRect.init(x: 20, y: 20, width: kScreenW-40, height: 40))
        lable.text = "由于您所在的企业内没有其他成员，所以只能通过邀请好友扫描以下二维码加入该群组。"
        lable.font = UIFont.systemFont(ofSize: 13)
        lable.textColor = UIColor.lightGray
        lable.numberOfLines = 0
       let image = UIImageView.init(frame: CGRect.init(x: 20, y: 80, width: kScreenW-40, height: kScreenW-40))
         view.addSubview(image)
       image.sd_setImage(with: NSURL.init(string: url) as URL?, placeholderImage: UIImage.init(named: "mine_avatar"))
       
       view.addSubview(lable)
       return view
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    /*
    // Only override draw() if you perform custom drawing.
    // An empty implementation adversely affects performance during animation.
    override func draw(_ rect: CGRect) {
        // Drawing code
    }
    */
}
//
//  GroupSettingTableViewHeader.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/9.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
protocol GroupSettingTableViewHeaderDelegate {
    //点击成员头像
    func userItemDidClick(userId:String)
    //点击添加按钮
    func addBtnDidClick()
    //点击删除按钮
    func delBtnDidClick()
}
class GroupSettingTableViewHeader: UICollectionView {
    var users : Array<GroupUserModel> = Array()
    var isAllowedInviteMember : Bool!
    var isAllowedDeleteMember : Bool!
    var myDelegate : GroupSettingTableViewHeaderDelegate?
    
    convenience init() {
        let flowlayout = UICollectionViewFlowLayout.init()
        flowlayout.scrollDirection = UICollectionView.ScrollDirection.vertical
        self.init(frame: CGRect.init(x: 0, y: 0, width: SCREEN_WIDTH, height: 56), collectionViewLayout: flowlayout)
        self.backgroundColor = UIColor.white
        self.delegate = self
        self.dataSource = self
        self.register(GroupSettingTableViewHeaderItem.self, forCellWithReuseIdentifier: "GroupSettingTableViewHeaderItem")
        
        isAllowedInviteMember = true
    }
}
//MARK: - UICollectionViewDelegate, UICollectionViewDataSource,UICollectionViewDelegateFlowLayout
extension GroupSettingTableViewHeader: UICollectionViewDelegate, UICollectionViewDataSource,UICollectionViewDelegateFlowLayout {
    //MARK: - UICollectionViewDelegateFlowLayout
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize.init(width: (SCREEN_WIDTH - 100) / 4, height: (SCREEN_WIDTH - 100) / 4 + 25)
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        let flowLayout : UICollectionViewFlowLayout = collectionViewLayout as! UICollectionViewFlowLayout
        flowLayout.minimumLineSpacing = 15
        flowLayout.minimumInteritemSpacing = 20
        return UIEdgeInsets(top: 15, left: 20, bottom: 15, right: 20)
    }
    //MARK: - UICollectionViewDataSource
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if isAllowedDeleteMember! {
            return users.count + 2;
        } else {
            if isAllowedInviteMember! {
                return users.count + 1;
            } else {
                return users.count;
            }
        }
    }
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell : GroupSettingTableViewHeaderItem = collectionView.dequeueReusableCell(withReuseIdentifier: "GroupSettingTableViewHeaderItem", for: indexPath) as! GroupSettingTableViewHeaderItem
        if users.count != 0 && (users.count - 1 >= indexPath.row) {
            
            cell.model = users[indexPath.row]
            
            cell.avatarImgV.sd_setImage(with: NSURL.init(string: (cell.model?.avater)!) as URL?, placeholderImage: UIImage.init(named: "mine_avatar"))
        }else if users.count >= indexPath.row {
            //添加
            cell.model = nil
            cell.avatarImgV.image = UIImage.init(named: "addMember_normal")
            
        }else{
            //删除
            cell.model = nil
            cell.avatarImgV.image = UIImage.init(named: "subtractMember_normal")
        }
        return cell
    }
    //MARK: - UICollectionViewDelegate
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if users.count != 0 && (users.count + 1 == indexPath.row) {
            myDelegate?.delBtnDidClick()
        }else if users.count == indexPath.row{
            myDelegate?.addBtnDidClick()
        }else{
            myDelegate?.userItemDidClick(userId: "")
        }
        
    }
   }
//
//  GroupSettingWithSwitchCell.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/9.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
protocol GroupSettingWithSwitchCellDelegate {
    func onClickSwitchButton(swich:UISwitch, title:String)
}
class GroupSettingWithSwitchCell: UITableViewCell {
    var delegate : GroupSettingWithSwitchCellDelegate?
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        
        self.backgroundColor = UIColor.white
        
        self.contentView.addSubview(titleLabel)
        self.contentView.addSubview(swich)
        
        titleLabel.mas_makeConstraints { [unowned self](make) in
            make!.left.equalTo()(LEFT_PADDING_GS)
            make!.centerY.equalTo()(self)
        }
       
        swich.mas_makeConstraints { [unowned self](make) in
            make!.right.equalTo()(-LEFT_PADDING_GS)
            make!.centerY.equalTo()(self)
        }
        
    }
    
    var model: Any? {
        didSet{
            titleLabel.text = (model as! Dictionary<String, Any>).first?.key
            swich.isOn = String.changeToString(inValue: (model as! Dictionary<String, Any>).first?.value) == "1"
        }
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    class func cell(withTableView tableView: UITableView) -> GroupSettingWithSwitchCell {
        var cell = tableView.dequeueReusableCell(withIdentifier: String(describing: self)) as? GroupSettingWithSwitchCell
        if cell == nil {
            cell = GroupSettingWithSwitchCell.init(style: .default, reuseIdentifier: String(describing: self))
            cell?.selectionStyle = .none
        }
        return cell!
    }
    
    @objc func onClickSwitch(swich:UISwitch, title:String) {
        delegate?.onClickSwitchButton(swich:swich, title: titleLabel.text!)
    }
    //MARK: - Getter and Setter
    //标题
    fileprivate lazy var titleLabel: UILabel = {
        var titleLabel = UILabel()
        titleLabel.font = FONT_16
        titleLabel.textColor = UIColor.black
        return titleLabel
    }()
    //开关
    lazy var swich: UISwitch = {
        var swich = UISwitch()
        swich.addTarget(self, action: #selector(onClickSwitch(swich:title:)), for: .valueChanged)
        return swich
    }()
}
//
//  GroupSettingTableViewHeaderItem.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/9.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class GroupSettingTableViewHeaderItem: UICollectionViewCell {
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        self.backgroundColor = UIColor.clear
        self.contentView.addSubview(avatarImgV)
        self.contentView.addSubview(nameLabel)
        
        avatarImgV.mas_makeConstraints { [unowned self](make) in
            make!.top.left().equalTo()(self)
            make!.size.equalTo()(CGSize(width: self.frame.size.width, height: self.frame.size.width))
        }
        nameLabel.mas_makeConstraints { [unowned self](make) in
            make!.top.equalTo()(self.avatarImgV.mas_bottom)!.offset()(5)
            make!.left.equalTo()(self.avatarImgV)
            make!.right.equalTo()(self.avatarImgV)
        }
    }
    
    var model: GroupUserModel? {
        didSet{
            nameLabel.text = model?.realname
        }
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    //头像
    lazy var avatarImgV: UIImageView = {
        var avatarImgV = UIImageView()
        avatarImgV.layer.cornerRadius = self.frame.size.width/2
        avatarImgV.clipsToBounds = true
        return avatarImgV
    }()
    //名称
    fileprivate lazy var nameLabel: UILabel = {
        var nameLabel = UILabel()
        nameLabel.font = FONT_12
        nameLabel.textColor = UIColor.darkGray
        nameLabel.textAlignment = .center
        return nameLabel
    }()
}
//
//  GroupSettingWithArrowCell.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/9.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class GroupSettingWithArrowCell: UITableViewCell {
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        self.backgroundColor = UIColor.white
        
        self.contentView.addSubview(titleLabel)
        self.contentView.addSubview(detailLabel)
        self.contentView.addSubview(detailImage)
        self.contentView.addSubview(rightArrow)
        titleLabel.mas_makeConstraints { [unowned self](make) in
            make!.left.equalTo()(LEFT_PADDING_GS)
            make!.centerY.equalTo()(self)
        }
        detailLabel.mas_makeConstraints { [unowned self](make) in
            make!.left.equalTo()(self.titleLabel.mas_right)!.offset()(10)
            make!.right.equalTo()(-LEFT_PADDING_GS - 15)
            make!.centerY.equalTo()(self)
        }
        detailImage.mas_makeConstraints { [unowned self](make) in
            make!.right.equalTo()(-LEFT_PADDING_GS - 15)
            make!.centerY.equalTo()(self)
            make!.size.equalTo()(CGSize.init(width: 25, height: 25))
        }
        rightArrow.mas_makeConstraints { [unowned self](make) in
            make!.right.equalTo()(-LEFT_PADDING_GS)
            make!.centerY.equalTo()(self)
            make!.size.equalTo()(CGSize.init(width: 7, height: 14))
        }
    }
    
    var model: Any? {
        didSet{
            titleLabel.text = (model as! Dictionary<String, Any>).first?.key
            detailLabel.text = (model as! Dictionary<String, Any>).first?.value as! String?
            if titleLabel.text == "群组公告" && detailLabel.text != "未设置"{
                titleLabel.mas_remakeConstraints { (make) in
                    make!.left.equalTo()(LEFT_PADDING_GS)
                    make!.top.equalTo()(12)
                }
                let height = ((detailLabel.text?.getTextHeight(font: FONT_14, width: SCREEN_WIDTH - LEFT_PADDING_GS * 2 - 15))! + 0.4) > 60 ? 50.5 : ((detailLabel.text?.getTextHeight(font: FONT_14, width: SCREEN_WIDTH - LEFT_PADDING_GS * 2 - 15))! + 0.4)
                detailLabel.mas_remakeConstraints { [unowned self](make) in
                    make!.left.equalTo()(self.titleLabel)
                    make!.right.equalTo()(-LEFT_PADDING_GS - 15)
                    make!.top.equalTo()(self.titleLabel.mas_bottom)!.offset()(5)
                    make!.height.equalTo()(height)
                }
            }else{
                titleLabel.mas_remakeConstraints { [unowned self](make) in
                    make!.left.equalTo()(LEFT_PADDING_GS)
                    make!.centerY.equalTo()(self)
                }
                detailLabel.mas_remakeConstraints { [unowned self](make) in
                    make!.left.equalTo()(self.titleLabel.mas_right)!.offset()(10)
                    make!.right.equalTo()(-LEFT_PADDING_GS - 15)
                    make!.centerY.equalTo()(self)
                }
            }
        }
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    class func cell(withTableView tableView: UITableView) -> GroupSettingWithArrowCell {
        var cell = tableView.dequeueReusableCell(withIdentifier: String(describing: self)) as? GroupSettingWithArrowCell
        if cell == nil {
            cell = GroupSettingWithArrowCell.init(style: .default, reuseIdentifier: String(describing: self))
            cell?.selectionStyle = .none
        }
        return cell!
    }
    //MARK: - Getter and Setter
    //标题
    fileprivate lazy var titleLabel: UILabel = {
        var titleLabel = UILabel()
        titleLabel.font = FONT_16
        titleLabel.textColor = UIColor.black
        return titleLabel
    }()
    
    //内容
    lazy var detailLabel: UILabel = {
        var detailLabel = UILabel()
        detailLabel.font = FONT_14
        detailLabel.textColor = UIColor.lightGray
        detailLabel.numberOfLines = 3
        return detailLabel
    }()
    
    //图片内容
    lazy var detailImage: UIImageView = {
        var detailImage = UIImageView()
        detailImage.image = UIImage.init(named: "二维码")
        return detailImage
    }()
    
    //箭头
    fileprivate lazy var rightArrow: UIImageView = {
        var rightArrow = UIImageView()
        rightArrow.image = UIImage.init(named: "rightArrow")
        return rightArrow
    }()
}
//
//  GroupNameEditTextField.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/15.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class GroupNameEditTextField: UITextField {
    convenience init(placeholder:String) {
        self.init()
        self.font = FONT_14
        self.textColor = UIColor.black
        self.layer.cornerRadius = 3
        self.layer.borderColor = UIColor.black.cgColor
        self.layer.borderWidth = 0.5
        self.placeholder = placeholder
        self.clearButtonMode = .whileEditing
    }
    override func placeholderRect(forBounds bounds: CGRect) -> CGRect {
        return  CGRect.init(x: bounds.origin.x + 5, y: bounds.origin.y, width: bounds.size.width - 30, height: bounds.size.height)
    }
    override func editingRect(forBounds bounds: CGRect) -> CGRect {
        return  CGRect.init(x: bounds.origin.x + 5, y: bounds.origin.y, width: bounds.size.width - 30, height: bounds.size.height)
    }
    override func textRect(forBounds bounds: CGRect) -> CGRect {
        return  CGRect.init(x: bounds.origin.x + 5, y: bounds.origin.y, width: bounds.size.width - 30, height: bounds.size.height)
    }
}
//
//  ApplyJoinGroupTextView.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/16.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class ApplyJoinGroupTextView: UITextView {
    override init(frame: CGRect, textContainer: NSTextContainer?) {
        super.init(frame: frame, textContainer: textContainer)
        self.delegate = self
        self.font = FONT_14
        self.textColor = UIColor.black
        self.layer.cornerRadius = 3
        self.layer.borderColor = UIColor.black.cgColor
        self.layer.borderWidth = 0.5
        self.textContainerInset = UIEdgeInsets(top: 12, left: 5, bottom: 0, right: 0)
        self.addSubview(placeholderLabel)
        self.addSubview(textLengthLabel)
        placeholderLabel.text = placeholder
        placeholderLabel.mas_makeConstraints { (make) in
            make!.top.equalTo()(12)
            make!.left.equalTo()(10)
        }
        textLengthLabel.mas_makeConstraints { (make) in
            make!.top.equalTo()(inputTV_height_MAX - 20)
            make!.left.equalTo()(frame.size.width - 40 - 10)
            make!.width.equalTo()(40)
        }
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    var placeholder : String?{
    
        didSet{
            placeholderLabel.text = placeholder
            if (placeholder?.contains("附加信息"))! {
                textLengthLabel.isHidden = false
                textLengthLabel.text = "0/30"
            }else{
                textLengthLabel.isHidden = true
            }
        }
    }
    
    lazy var placeholderLabel: UILabel = {
        var placeholderLabel = UILabel.init()
        placeholderLabel.font = FONT_14
        placeholderLabel.textColor = UIColor.lightGray
        return placeholderLabel
    }()
    
    lazy var textLengthLabel: UILabel = {
        var textLengthLabel = UILabel.init()
        textLengthLabel.font = FONT_14
        textLengthLabel.textColor = UIColor.lightGray
        textLengthLabel.textAlignment = .right
        textLengthLabel.text = "0/30"
        return textLengthLabel
    }()
}
extension ApplyJoinGroupTextView : UITextViewDelegate{
    func textViewDidChange(_ textView: UITextView) {
        
    }
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        var str = textView.text?.replacingCharacters(in: (textView.text?.changeToRange(from: range)!)!, with: text)
        if (str?.count)! > 0 {
            placeholderLabel.isHidden = true
        }else{
            placeholderLabel.isHidden = false
        }
        if (str?.count)! > 30 {
            textView.text = str?.substring(to: (str?.index((str?.startIndex)!, offsetBy: 30))!)
            textLengthLabel.text = "30/30"
            return false
        }
        textLengthLabel.text = "\((str?.count)!)/30"
        return true
    }
}
//
//  ApplyJoinGroupBottomBtn.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/20.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class ApplyJoinGroupBottomBtn: UIButton {
    override init(frame: CGRect) {
        super.init(frame: frame)
        
        self.addSubview(lineView)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func layoutSubviews() {
        super.layoutSubviews()
        lineView.frame = CGRect.init(x: 0, y: self.frame.size.height - 5, width: self.frame.size.width, height: 0.7)
    }
    
    lazy var lineView: UIView = {
        let lineView = UIView.init()
        lineView.backgroundColor = UIColor.hexString(hexString: "2183DE")
        return lineView
    }()
}
//
//  GroupListCell.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/1.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
private let headerImageViewWidth : CGFloat = 44.0
class GroupListCell: RCConversationBaseCell {
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        
        self.contentView.addSubview(headerImageView)
        self.contentView.addSubview(nameLabel)
        self.contentView.addSubview(timeLabel)
        self.contentView.addSubview(detailLabel)
        headerImageView.mas_makeConstraints { (make) in
            make!.top.left().equalTo()(LEFT_PADDING)
            make!.size.equalTo()(CGSize(width: headerImageViewWidth, height: headerImageViewWidth))
        }
        nameLabel.mas_makeConstraints { [unowned self](make) in
            make!.top.equalTo()(self.headerImageView)
            make!.left.equalTo()(self.headerImageView.mas_right)!.offset()(LEFT_PADDING)
            make!.right.equalTo()(self.timeLabel.mas_left)!.offset()(-LEFT_PADDING)
        }
        timeLabel.mas_makeConstraints { [unowned self](make) in
            make!.top.equalTo()(self.headerImageView)
            make!.right.equalTo()(-LEFT_PADDING)
        }
        detailLabel.mas_makeConstraints { [unowned self](make) in
            make!.left.equalTo()(self.nameLabel)
            make!.right.equalTo()(-LEFT_PADDING)
            make!.bottom.equalTo()(self.headerImageView)
        }
    }
    override var model: RCConversationModel!{
        didSet {
            
//            let imageViewsCount : Int = model.extend != nil ? (model.extend as! NSMutableArray).count : 0
//            var imageViews : Array<Any> = []
//            for _ in 0..<imageViewsCount {
//                let imageView = UIImageView()
//                imageView.backgroundColor = UIColor.darkGray
//                imageViews.append(imageView)
//            }
            self.backgroundColor = model.isTop ? model.topCellBackgroundColor : model.cellBackgroundColor
            self.headerImageView.sd_setImage(with: NSURL.init(string: model.extend != nil ? model.extend as! String : " ") as URL?, placeholderImage: UIImage.init(named: "mine_avatar"))
//            self.headerImageView.stitchingOnImageView(imageViews: imageViews)
            self.headerImageView.badgeCenterOffset = CGPoint(x : -2, y : 0)
            if model.unreadMessageCount > 0 {
                self.headerImageView.showBadge(with: .redDot, value: model.unreadMessageCount, animationType: .none)
            }else{
                self.headerImageView.clearBadge()
            }
            
            if model.receivedTime == 0 {
                self.timeLabel.text = ""
            }else{
                let target : Date = Date.init(timeIntervalSince1970: TimeInterval(model.receivedTime / 1000))
                self.timeLabel.text = self.convertDate(date: target)
            }
            self.timeLabel.sizeToFit()
            timeLabel.mas_updateConstraints { [unowned self](make) in
                make!.width.equalTo()(self.timeLabel.frame.size.width)
            }
            self.nameLabel.text = model.conversationTitle
            
            if model.objectName.count > 0 {
                var unreadMessageCountStr : String?
                if model.unreadMessageCount > 1 {
                    unreadMessageCountStr = model.unreadMessageCount > 99 ? "[99条+]" : "[\(model.unreadMessageCount)条]"
                }else{
                    unreadMessageCountStr = ""
                }
                
                var lastSender : String?
                if model.senderUserId == "1" || model.senderUserId == sharePublicDataSingle.publicData.userid {
                    lastSender = nil
                }else{
                    
                    let groupUserModels = GroupUserModel.objects(with: NSPredicate.init(format:"userid == %@", model.senderUserId))
                    
                    var groupUserModel:GroupUserModel?
                    
                    if groupUserModels.count > 0 {
                        groupUserModel = groupUserModels.firstObject() as? GroupUserModel
                    }
//                    let groupUserModel = GroupUserModel.objects(with: NSPredicate.init(format:"userid == %@", model.senderUserId)).firstObject() as? GroupUserModel
                    lastSender = groupUserModel?.realname
                }
//                RC:CmdMsg  RC:CmdNtf  RC:InfoNtf RCTextMessageTypeIdentifier RC:GrpNtf
                
                var lastMessage : String!
                switch model.objectName {
                case "RC:TxtMsg":
                    lastMessage = model.lastestMessage.conversationDigest()
                case "RC:VcMsg":
                    lastMessage = "[语音]"
                case "RC:ImgMsg":
                    lastMessage = "[图片]"
                case "RC:LBSMsg":
                    lastMessage = "[位置]"
                case "RC:FileMsg":
                    lastMessage = "[文件]"
                case "RC:ImgTextMsg","RC:PSMultiImgTxtMsg","RC:PSImgTxtMsg":
                    lastMessage = "[图文]"
                case "RC:GrpNtf":
                    if model.lastestMessage is RCGroupNotificationMessage {
                        let message = model.lastestMessage as! RCGroupNotificationMessage
                        lastMessage = message.message
                        
                        if model.conversationTitle == nil && message.operation == "Create" {
                            let jsonData:Data = message.data.data(using: .utf8)!
                            
                            let groupInfo = try? (JSONSerialization.jsonObject(with: jsonData, options: .mutableContainers) as! Dictionary<String,Any>)
                            self.nameLabel.text = groupInfo!["targetGroupName"] as? String
                        }
                    }
                    
                default:
                    
                    lastMessage = ""
                    if model.lastestMessage.responds(to: #selector(RCMessageContentView.conversationDigest)) {
                        lastMessage = model.lastestMessage.conversationDigest()
                    }
            
                    break
                }
                self.detailLabel.text = unreadMessageCountStr! + (lastSender == nil ? "" : (lastSender! + " : ")) + lastMessage
            }
        }
    }
    /*
    var model : String! {
        didSet {
        
            let imageViewsCount : Int = Int(model)!
            var imageViews : Array<Any> = []
            for _ in 0..<imageViewsCount {
                let imageView = UIImageView()
                imageView.backgroundColor = UIColor.darkGray
                imageViews.append(imageView)
            }
            self.headerImageView.stitchingOnImageView(imageViews: imageViews)
            self.headerImageView.badgeCenterOffset = CGPoint(x : -2, y : 0)
            if imageViewsCount == 1 {
                
                self.headerImageView.showBadge(with: .redDot, value: imageViewsCount, animationType: .none)
            }else if imageViewsCount == 9 {
                self.headerImageView.showBadge(with: .number, value: 100, animationType: .none)
            }else{
                self.headerImageView.showBadge(with: .number, value: imageViewsCount, animationType: .none)
            }
            let targetStr = "2017-02-28 16:00"
            let dateFormatter : DateFormatter = DateFormatter()
            dateFormatter.dateFormat = "yyyy-MM-dd HH:mm"
            let targetD = dateFormatter.date(from: targetStr)
            self.timeLabel.text = self.convertDate(date: targetD!)
            self.timeLabel.sizeToFit()
            timeLabel.mas_updateConstraints { [unowned self](make) in
                make!.width.equalTo()(self.timeLabel.frame.size.width)
            }
            self.nameLabel.text = "群组名称群组名称群组名称群组名称群组名称"
//            NSMutableAttributedString *attrStr = [[NSMutableAttributedString alloc]initWithString:modelStr];
//            NSString *str = [[modelStr componentsSeparatedByString:@":"].firstObject stringByAppendingString:@":"];
//            NSRange range = [modelStr rangeOfString:str];
//            
//            [attrStr addAttribute:NSForegroundColorAttributeName value:color range:range];
//            
//            self.lbDetail.attributedText = attrStr;
            let detailText = "[有人@我]消息内容消息内容消息内容消息内容消息内容消息内容消息内容消息内容消息内容"
            let attrStr : NSMutableAttributedString = NSMutableAttributedString.init(string: detailText)
            let attrText : String = "[有人@我]"
            attrStr.addAttributes([NSForegroundColorAttributeName:UIColor.red], range: NSRange.init(location: 0, length: attrText.characters.count))
            self.detailLabel.attributedText = attrStr
        }
    }
 */
    func convertDate(date:Date) -> String {
        if Date.isToday(target: date) {
            let dateFormatter : DateFormatter = DateFormatter()
            dateFormatter.dateFormat = "HH:mm"
            return dateFormatter.string(from: date)
        }else if Date.isLastDay(target: date) {
            return "昨天"
        }else if Date.isOneWeek(target: date) {
            return Date.weekWithDateString(target: date)
        }else{
            return Date.formattDay(target: date)
        }
    }
    class func cell(withTableView tableView: UITableView) -> GroupListCell {
//        var cell = tableView.dequeueReusableCell(withIdentifier: String(describing: self)) as? GroupListCell
//        if cell == nil {
//            cell = GroupListCell.init(style: .default, reuseIdentifier: String(describing: self))
//            cell?.selectionStyle = .none
//        }
        let cell = GroupListCell.init(style: .default, reuseIdentifier: String(describing: self))
        cell.selectionStyle = .none
        return cell
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    //MARK: - Getter and Setter
    //头像
    fileprivate var headerImageView: StitchingImageView = {
        var headerImageView = StitchingImageView.init(frame: CGRect(x: 0, y: 0, width: headerImageViewWidth, height: headerImageViewWidth))
        headerImageView.layer.cornerRadius = 4.0
        return headerImageView
    }()
    
    //名称
    fileprivate lazy var nameLabel: UILabel = {
        var nameLabel = UILabel()
        nameLabel.font = FONT_14
        nameLabel.textColor = UIColor.black
        return nameLabel
    }()
    
    //时间
    fileprivate lazy var timeLabel: UILabel = {
        var timeLabel = UILabel()
        timeLabel.font = FONT_14
        timeLabel.textColor = UIColor.lightGray
        timeLabel.sizeToFit()
        return timeLabel
    }()
    
    //内容
    fileprivate lazy var detailLabel: UILabel = {
        var detailLabel = UILabel()
        detailLabel.font = FONT_14
        detailLabel.textColor = UIColor.lightGray
        return detailLabel
    }()
}
//
//  StitchingImageView.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/1.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
private let margin : CGFloat = 2.0
private var imageViewWidth :CGFloat = 0.0
class StitchingImageView: UIImageView {
    override init(frame: CGRect) {
        super.init(frame: frame)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func stitchingOnImageView(imageViews:Array<Any>){
        var imageViews = imageViews
        
        if imageViews.count == 1 {
            imageViewWidth = (self.frame.size.width - margin * 3) / 2
        } else if imageViews.count >= 2 && imageViews.count <= 4 {
            imageViewWidth = (self.frame.size.width - margin * 3) / 2
        } else {
            imageViewWidth = (self.frame.size.width - margin * 4) / 3
        }
        
        if imageViews.count == 1
        {
            let imageView_1 : UIImageView = imageViews[0] as! UIImageView
            imageView_1.frame = CGRect(x: (self.frame.size.width - imageViewWidth) / 2, y: (self.frame.size.height - imageViewWidth) / 2, width: imageViewWidth, height: imageViewWidth)
        }
        else if imageViews.count == 2
        {
            let row_1_origin_y : CGFloat = (self.frame.size.height - imageViewWidth) / 2
            imageViews = self.generatorArr(imageViews: imageViews, beginOriginY: row_1_origin_y)
        }
        else if imageViews.count == 3
        {
            let row_1_origin_y : CGFloat = (self.frame.size.height - imageViewWidth * 2) / 3
            
            let imageView_1 : UIImageView = imageViews[0] as! UIImageView
            imageView_1.frame = CGRect(x: (self.frame.size.width - imageViewWidth) / 2, y: row_1_origin_y, width: imageViewWidth, height: imageViewWidth)
            imageViews = self.generatorArr(imageViews: imageViews, beginOriginY: row_1_origin_y + imageViewWidth + margin)
        }
        else if imageViews.count == 4
        {
            let row_1_origin_y : CGFloat = (self.frame.size.height - imageViewWidth * 2) / 3
            imageViews = self.generatorArr(imageViews: imageViews, beginOriginY: row_1_origin_y)
        }
        else if imageViews.count == 5
        {
            let row_1_origin_y = (self.frame.size.height - imageViewWidth * 2 - margin) / 2
            
            let imageView_1 : UIImageView = imageViews[0] as! UIImageView
            imageView_1.frame = CGRect(x: (self.frame.size.width - 2 * imageViewWidth - margin) / 2, y: row_1_origin_y, width: imageViewWidth, height: imageViewWidth)
            
            let imageView_2 : UIImageView = imageViews[1] as! UIImageView
            imageView_2.frame = CGRect(x: imageView_1.frame.origin.x + imageView_1.frame.size.width + margin, y: row_1_origin_y, width: imageViewWidth, height: imageViewWidth)
            
            imageViews = self.generatorArr(imageViews: imageViews, beginOriginY: row_1_origin_y + imageViewWidth + margin)
        }
        else if imageViews.count == 6
        {
            let row_1_origin_y : CGFloat = (self.frame.size.height - imageViewWidth * 2 - margin) / 2
            imageViews = self.generatorArr(imageViews: imageViews, beginOriginY: row_1_origin_y)
        }
        else if imageViews.count == 7
        {
            let row_1_origin_y = (self.frame.size.height - imageViewWidth * 3) / 4
            
            let imageView_1 : UIImageView = imageViews[0] as! UIImageView
            imageView_1.frame = CGRect(x: (self.frame.size.width - imageViewWidth) / 2, y: row_1_origin_y, width: imageViewWidth, height: imageViewWidth)
            imageViews = self.generatorArr(imageViews: imageViews, beginOriginY: row_1_origin_y + imageViewWidth + margin)
        }
        else if imageViews.count == 8
        {
            let row_1_origin_y : CGFloat = (self.frame.size.height - imageViewWidth * 3) / 4
            
            let imageView_1 : UIImageView = imageViews[0] as! UIImageView
            imageView_1.frame = CGRect(x: (self.frame.size.width - 2 * imageViewWidth - margin) / 2, y: row_1_origin_y, width: imageViewWidth, height: imageViewWidth)
            
            let imageView_2 : UIImageView = imageViews[1] as! UIImageView
            imageView_2.frame = CGRect(x: imageView_1.frame.origin.x + imageView_1.frame.size.width + margin, y: row_1_origin_y, width: imageViewWidth, height: imageViewWidth)
            imageViews = self.generatorArr(imageViews: imageViews, beginOriginY: row_1_origin_y + imageViewWidth + margin)
            
        }
        else if imageViews.count == 9
        {
            let row_1_origin_y = (self.frame.size.height - imageViewWidth * 3) / 4
            imageViews = self.generatorArr(imageViews: imageViews, beginOriginY: row_1_origin_y)
        }
        
        for imageView in imageViews {
            self.addSubview(imageView as! UIImageView)
        }
    }
    fileprivate func generatorArr(imageViews:Array<Any> , beginOriginY:CGFloat) -> Array<Any> {
        
        var cellCount : Int
        var maxRow : Int
        var maxColumn : Int
        var ignoreCountOfBegining : Int
        
        if imageViews.count <= 4
        {
            maxRow = 2
            maxColumn = 2
            ignoreCountOfBegining = imageViews.count % 2
            cellCount = 4
        }
        else
        {
            maxRow = 3
            maxColumn = 3
            ignoreCountOfBegining = imageViews.count % 3
            cellCount = 9
        }
        for index in 0..<cellCount {
            if index > imageViews.count - 1 {
                break
            }
            if index < ignoreCountOfBegining {
                continue
            }
            let row = (index - ignoreCountOfBegining) / maxRow
            let column = (index - ignoreCountOfBegining) % maxColumn
            let origin_x = margin + imageViewWidth * CGFloat(column) + margin * CGFloat(column)
            let origin_y = beginOriginY + imageViewWidth * CGFloat(row) + margin * CGFloat(row)
            let imageView : UIImageView = imageViews[index] as! UIImageView
            imageView.frame = CGRect(x: origin_x, y: origin_y, width: imageViewWidth, height: imageViewWidth)
        }
        return imageViews
    }
    
}
//
//  ThemeListCell.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/8.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
class ThemeListCell: UITableViewCell {
    override func awakeFromNib() {
        super.awakeFromNib()
        // Initialization code
    }
    override func setSelected(_ selected: Bool, animated: Bool) {
        super.setSelected(selected, animated: animated)
        // Configure the view for the selected state
    }
    
}
//
//  ComboboxView.swift
//  GroupChatPlungSwiftPro
//
//  Created by rms on 17/3/21.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
protocol ComboboxViewDelegate {
    func comboboxViewOneRowClick(button:UIButton)
}
class ComboboxView: UIView {
    var delegate : ComboboxViewDelegate?
    convenience init(titles : Array<String>, imageNames : Array<Array<String>>?, bgImgName : String?, frame:CGRect) {
        self.init()
        self.frame = UIScreen.main.bounds
        self.backgroundColor = UIColor.clear
        let comboboxView = UIView.init(frame: frame)
        self.addSubview(comboboxView)
        //顶部边距
        let topPadding : CGFloat = TOP_PADDING
        //背景颜色
        if bgImgName == nil {
            comboboxView.backgroundColor = UIColor.black
            comboboxView.alpha = 0.5
        } else {
            let imgBG = UIImageView.init(frame: comboboxView.bounds)
            imgBG.image = UIImage.init(named: bgImgName!)
            comboboxView.addSubview(imgBG)
        }
        
        //留白
        let blankSpace = UIView.init(frame: CGRect.init(x: 0, y: 0, width: frame.size.width, height: topPadding))
        blankSpace.backgroundColor = UIColor.clear
        comboboxView.addSubview(blankSpace)
        for index in 0..<titles.count {
            let oneRow = UIButton.init(frame: CGRect.init(x: 0, y: CGFloat(index) * oneRow_height + topPadding + 1, width: frame.size.width, height: oneRow_height))
            oneRow.tag = index + 10
            oneRow.contentVerticalAlignment = .center
            //文字
            let finalText = (imageNames?.count)! > 0 ? "  ".appending(titles[index]) : titles[index]
            oneRow.setTitleColor(UIColor.white, for: .normal)
            oneRow.titleLabel?.font = FONT_14
            oneRow.setTitle(finalText, for: .normal)
            
            //图片
            if (imageNames?.count)! > 0 {
                let norImgName : String? = imageNames?[0][index]
                let selImgName : String? = imageNames?[1][index]
                oneRow.setImage(UIImage.init(named: norImgName!), for: .normal)
                oneRow.setImage(UIImage.init(named: selImgName!), for: .highlighted)
            }
            oneRow.addTarget(self, action: #selector(clickOneRow), for: .touchUpInside)
            comboboxView.addSubview(oneRow)
            
            if (index > 0) {
                //分割线
                let line = UIView.init(frame: CGRect.init(x: 0, y: CGFloat(index) * oneRow_height + topPadding, width: frame.size.width, height: 1))
                line.backgroundColor = UIColor.hexString(hexString: "d6d2d2")
                comboboxView.addSubview(line)
            }
        }
    }
    @objc func clickOneRow(button:UIButton) {
        self.removeFromSuperview()
        delegate?.comboboxViewOneRowClick(button: button)
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.removeFromSuperview()
    }
    
}
//
//  CellMenuView.swift
//  GroupChatPlungSwiftPro
//
//  Created by harry on 17/3/9.
//  Copyright © 2017年 柴进. All rights reserved.
//
import UIKit
//TODO:(harry标注)--类型还没填完全
enum MenuType {
    case MenuType_Copy
}
class CellMenuView: UIView {
   
  typealias clickBlock = (_ type:MenuType)->()
  fileprivate  var block : clickBlock?
    
    
   @objc fileprivate func click(notification: NSNotification)
    {
     self.removeFromSuperview()
    }
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    
   
  fileprivate  override init(frame: CGRect) {
        super.init(frame: frame)
    
    NotificationCenter.default.addObserver(self, selector: #selector(click), name: UIMenuController.willHideMenuNotification, object: nil)
        
    }
    
    
    override var canBecomeFirstResponder: Bool
    {
        return true
    }
    
    override func canPerformAction(_ action: Selector, withSender sender: Any?) -> Bool {
        
        //        return true
        if action == #selector(copyClick1(item:)) || action == #selector(copyClick2(item:)) || action == #selector(copyClick3(item:))
        {
            return true
            
        }
        else
        {
            return false
        }
    }
    
    
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}
//MARK: - ---------------------类内部私有方法----------------------
extension CellMenuView{
    fileprivate  func configItem(menu:UIMenuController) {
        
        let copy1 = UIMenuItem.init(title: "复制1", action: #selector(copyClick1(item:)))
        let copy2 = UIMenuItem.init(title: "复制1", action: #selector(copyClick2(item:)))
        let copy3 = UIMenuItem.init(title: "复制1", action: #selector(copyClick3(item:)))
        menu.menuItems = [copy1,copy2,copy3]
    }
}
//MARK: - ---------------------按钮点击响应方法----------------------
extension CellMenuView{
    
    @objc fileprivate func copyClick1(item:UIMenuItem) -> () {
        block?(MenuType.MenuType_Copy)
    }
    @objc fileprivate func copyClick2(item:UIMenuItem) -> () {
        block?(MenuType.MenuType_Copy)
    }
    @objc fileprivate func copyClick3(item:UIMenuItem) -> () {
        block?(MenuType.MenuType_Copy)
    }
}
//MARK: - ---------------------对外接口----------------------
extension CellMenuView{
    
    
    /// 初始化菜单
    ///
    /// - Parameter inview: 传入将要作为被处理的View
    /// - Returns: 返回CellMenuView 对象 用来做按钮点击后的回调用
    public static func configWith(inview:UIView)->(CellMenuView)
    {
        let myView = CellMenuView.init(frame: CGRect.init(x: 0, y: 0, width: 0, height: 0))
        inview.addSubview(myView)
        myView.becomeFirstResponder()
        
        
        let menuVC = UIMenuController.shared
        myView.configItem(menu: menuVC)
        menuVC.setTargetRect(CGRect.init(x: 0, y: 0, width: 100, height: 30), in:inview )
        menuVC.setMenuVisible(true, animated: false)
        return myView
    }
    
    /// 菜单按钮点击回调闭包
    ///
    /// - Parameter type: 返回点击的类型
    public func menuClickWithType(type:@escaping clickBlock)
    {
        block = type
    }
}
